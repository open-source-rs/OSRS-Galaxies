{
  "category": "OSRS-MITRE-Persistence",
  "description": "Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code.",
  "name": "OSRS-MITRE-Persistence",
  "source": "MITRE ATT&CK",
  "type": "OSRS-MITRE-Persistence",
  "uuid": "85a768f4-fa3a-11e9-aad5-362b9e155667",
  "values": [
	  {
      "description": "Test place holder",
      "meta": {
        "refs": [
          "https://attack.mitre.org/tactics/TA0003/"
        ]
      },
      "uuid": "ab8ad1f8-fa41-11e9-8f0b-362b9e155667",
      "value": "Test OSRS-MITRE-Persistence Value"
    },
	{
      "description": ".bash_profile and .bashrc are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. .bash_profile is executed for login shells and .bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), the .bash_profile script is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, the .bashrc script is executed. This allows users more fine-grained control over when they want certain commands executed. These shell scripts are meant to be written to by the local user to configure their own environment.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1156"
        ]
      },
      "uuid": "d1763236-fa69-11e9-8f0b-362b9e155667",
      "value": "bash_profile and bashrc T1156"
    },
	{
      "description": "Windows contains accessibility features that may be launched with a key combination before a user has logged in (for example, when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1015"
        ]
      },
      "uuid": "d1763538-fa69-11e9-8f0b-362b9e155667",
      "value": "Accessibility Features T1015"
    },
	{
      "description": "Account manipulation may aid adversaries in maintaining access to credentials and certain permission levels within an environment. Manipulation could consist of modifying permissions, modifying credentials, adding or changing permission groups, modifying account settings, or modifying how authentication is performed. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to subvert password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1098"
        ]
      },
      "uuid": "d17637ae-fa69-11e9-8f0b-362b9e155667",
      "value": "Account Manipulation T1098"
    },
	{
      "description": "Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under HKEY_LOCAL_MACHINE.SystemCurrentControlSetControlSession Manager are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1182"
        ]
      },
      "uuid": "348ca756-1d33-11ea-acaa-2e728ce88125",
      "value": "AppCert DLLs T1182"
    },
	{
      "description": "The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses Hooking to redirect the code as necessary in order to communicate with the OS.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1138"
        ]
      },
      "uuid": "4f0e7b5e-fa6a-11e9-8f0b-362b9e155667",
      "value": "Application Shimming T1138"
    },
	{
      "description": "Windows Authentication Package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1131"
        ]
      },
      "uuid": "4f0e7dac-fa6a-11e9-8f0b-362b9e155667",
      "value": "Authentication Package T1131"
    },
	{
      "description": "Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1197"
        ]
      },
      "uuid": "4f0e7ef6-fa6a-11e9-8f0b-362b9e155667",
      "value": "BITS Jobs T1197"
    },
	{
      "description": "A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1067"
        ]
      },
      "uuid": "4f0e8022-fa6a-11e9-8f0b-362b9e155667",
      "value": "Bootkit T1067"
    },
	{
      "description": "Browser extensions or plugins are small programs that can add functionality and customize aspects of internet browsers. They can be installed directly or through a browser's app store. Extensions generally have access and permissions to everything that the browser can access.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1176"
        ]
      },
      "uuid": "4f0e83b0-fa6a-11e9-8f0b-362b9e155667",
      "value": "Browser Extensions T1176"
    },
	{
      "description": "When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1042"
        ]
      },
      "uuid": "abb04d9c-fa6a-11e9-8f0b-362b9e155667",
      "value": "Change Default File Association T1042"
    },
	{
      "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1109"
        ]
      },
      "uuid": "abb0524c-fa6a-11e9-8f0b-362b9e155667",
      "value": "Component Firmware T1109"
    },
	{
      "description": "The Component Object Model (COM) is a system within Windows to enable interaction between software components through the operating system. Adversaries can use this system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Windows Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1122"
        ]
      },
      "uuid": "abb053aa-fa6a-11e9-8f0b-362b9e155667",
      "value": "Component Object Model Hijacking T1122"
    },
	{
      "description": "Adversaries with a sufficient level of access may create a local system, domain, or cloud tenant account. Such accounts may be used for persistence that do not require persistent remote access tools to be deployed on the system.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1136"
        ]
      },
      "uuid": "abb054e0-fa6a-11e9-8f0b-362b9e155667",
      "value": "Create Account T1136"
    },
	{
      "description": "Windows systems use a common method to look for required DLLs to load into a program. Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1038"
        ]
      },
      "uuid": "abb05616-fa6a-11e9-8f0b-362b9e155667",
      "value": "DLL Search Order Hijacking T1038"
    },
	{
      "description": "macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1157"
        ]
      },
      "uuid": "1500c39e-fa6b-11e9-8f0b-362b9e155667",
      "value": "Dylib Hijacking T1157"
    },
	{
      "description": "Adversaries may use Event Monitor Daemon (emond) to establish persistence by scheduling malicious commands to run on predictable event triggers. Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at /sbin/emond will load any rules from the /etc/emond.d/rules/ directory and take action once an explicitly defined event takes place. The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path /private/var/db/emondClients, specified in the Launch Daemon configuration file at/System/Library/LaunchDaemons/com.apple.emond.plist.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1519"
        ]
      },
      "uuid": "1500c614-fa6b-11e9-8f0b-362b9e155667",
      "value": "Emond T1519"
    },
	{
      "description": "Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management can also be used externally.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1133"
        ]
      },
      "uuid": "1500c75e-fa6b-11e9-8f0b-362b9e155667",
      "value": "External Remote Services T1133"
    },
	{
      "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1044"
        ]
      },
      "uuid": "1500c894-fa6b-11e9-8f0b-362b9e155667",
      "value": "File System Permissions Weakness T1044"
    },
	{
      "description": "To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a hidden file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls –a for Linux and macOS).",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1158"
        ]
      },
      "uuid": "1500c9ca-fa6b-11e9-8f0b-362b9e155667",
      "value": "Hidden Files and Directories T1179"
    },
	{
      "description": "Windows processes often leverage application programming interface (API) functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1179"
        ]
      },
      "uuid": "8956568c-fa6b-11e9-8f0b-362b9e155667",
      "value": "Hooking T1179"
    },
	{
      "description": "A type-1 hypervisor is a software layer that sits between the guest operating systems and system's hardware. It presents a virtual running environment to an operating system. An example of a common hypervisor is Xen. A type-1 hypervisor operates at a level below the operating system and could be designed with Rootkit functionality to hide its existence from the guest operating system. A malicious hypervisor of this nature could be used to persist on systems through interruption.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1062"
        ]
      },
      "uuid": "8956590c-fa6b-11e9-8f0b-362b9e155667",
      "value": "Hypervisor T1062"
    },
	{
      "description": "Image File Execution Options (IFEO) enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1183"
        ]
      },
      "uuid": "89565d6c-fa6b-11e9-8f0b-362b9e155667",
      "value": "Image File Execution Options Injection T1183"
    },
	{
      "description": "Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored to include malicious code. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1525"
        ]
      },
      "uuid": "348ca756-1d33-11ea-acaa-2e728ce88125",
      "value": "Implant Container Image T1525"
    },
	{
      "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.  When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0).  Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1215"
        ]
      },
      "uuid": "89565efc-fa6b-11e9-8f0b-362b9e155667",
      "value": "Kernel Modules and Extensions T1215"
    },
	{
      "description": "Per Apple’s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in /System/Library/LaunchAgents, /Library/LaunchAgents, and $HOME/Library/LaunchAgents . These launch agents have property list files which point to the executables that will be launched.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1159"
        ]
      },
      "uuid": "89566032-fa6b-11e9-8f0b-362b9e155667",
      "value": "Launch Agent T1159"
    },
	{
      "description": "Per Apple’s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in /System/Library/LaunchDaemons and /Library/LaunchDaemons . These LaunchDaemons have property list files which point to the executables that will be launched.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1160"
        ]
      },
      "uuid": "14717382-fa6c-11e9-8f0b-362b9e155667",
      "value": "Launch Daemon T1160"
    },
	{
      "description": "Launchctl controls the macOS launchd process which handles things like launch agents and launch daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input. By loading or reloading launch agents or launch daemons, adversaries can install persistence or execute changes they made . Running a command from launchctl is as simple as launchctl submit -l -- /Path/to/thing/to/execute arg arg arg. Loading, unloading, or reloading launch agents or launch daemons can require elevated privileges.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1152"
        ]
      },
      "uuid": "1471762a-fa6c-11e9-8f0b-362b9e155667",
      "value": "Launchctl T1152"
    },
	{
      "description": "Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long adjustments are made to the rest of the fields and dependencies . There are tools available to perform these changes. Any changes will invalidate digital signatures on binaries because the binary is being modified. Adversaries can remediate this issue by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1161"
        ]
      },
      "uuid": "1471779c-fa6c-11e9-8f0b-362b9e155667",
      "value": "LC_LOAD_DYLIB Addition T1161"
    },
	{
      "description": "On Linux and macOS systems, multiple methods are supported for creating pre-scheduled and periodic background jobs: cron, at, and launchd. Unlike Scheduled Task on Windows systems, job scheduling on Linux-based systems cannot be done remotely unless used in conjunction within an established remote session, like secure shell (SSH).",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1168"
        ]
      },
      "uuid": "147179c2-fa6c-11e9-8f0b-362b9e155667",
      "value": "Local Job Scheduling T1168"
    },
	{
      "description": "MacOS provides the option to list specific applications to run when a user logs in. These applications run under the logged in user's context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them . Users have direct control over login items installed using a shared file list which are also visible in System Preferences . These login items are stored in the user's ~/Library/Preferences/ directory in a plist file called com.apple.loginitems.plist . Some of these applications can open visible dialogs to the user, but they don’t all have to since there is an option to ‘Hide’ the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in . The API method SMLoginItemSetEnabled can be used to set Login Items, but scripting languages like AppleScript can do this as well.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1162"
        ]
      },
      "uuid": "14717b3e-fa6c-11e9-8f0b-362b9e155667",
      "value": "Login Item T1162"
    },
	{
      "description": "Windows allows logon scripts to be run whenever a specific user or group of users log into a system. The scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1037"
        ]
      },
      "uuid": "956fe996-fa6c-11e9-aad5-362b9e155667",
      "value": "Logon Scripts T1037"
    },
	{
      "description": "The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1177"
        ]
      },
      "uuid": "956fec20-fa6c-11e9-aad5-362b9e155667",
      "value": "LSASS Driver T1177"
    },
	{
      "description": "Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Registry. Service configurations can be modified using utilities such as sc.exe and Reg.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1031"
        ]
      },
      "uuid": "956fed6a-fa6c-11e9-aad5-362b9e155667",
      "value": "Modify Existing Service T1031"
    },
	{
      "description": "Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLMSOFTWAREMicrosoftNetsh.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1128"
        ]
      },
      "uuid": "956feea0-fa6c-11e9-aad5-362b9e155667",
      "value": "Netsh Helper DLL T1128"
    },
	{
      "description": "When operating systems boot up, they can start programs or applications called services that perform background system functions. A service's configuration information, including the file path to the service's executable, is stored in the Windows Registry.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1050"
        ]
      },
      "uuid": "956ff08a-fa6c-11e9-aad5-362b9e155667",
      "value": "New Service T1050"
    },
	{
      "description": "Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1137"
        ]
      },
      "uuid": "06f36782-fa6d-11e9-8f0b-362b9e155667",
      "value": "Office Application Startup T1137"
    },
	{
      "description": "Path interception occurs when an executable is placed in a specific path so that it is executed by an application instead of the intended target. One example of this was the use of a copy of cmd in the current working directory of a vulnerable application that loads a CMD or BAT file with the CreateProcess function.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1034"
        ]
      },
      "uuid": "06f36a02-fa6d-11e9-8f0b-362b9e155667",
      "value": "Path Interception T1034"
    },
	{
      "description": "Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as /Library/Preferences (which execute with elevated privileges) and ~/Library/Preferences (which execute with a user's privileges).",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1150"
        ]
      },
      "uuid": "06f36b60-fa6d-11e9-8f0b-362b9e155667",
      "value": "Plist Modification T1150"
    },
	{
      "description": "Port Knocking is a well-established method used by both defenders and adversaries to hide open ports from access. To enable a port, an adversary sends a series of packets with certain characteristics before the port will be opened. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports, but can involve unusual flags, specific strings or other unique characteristics. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1205"
        ]
      },
      "uuid": "06f36c96-fa6d-11e9-8f0b-362b9e155667",
      "value": "Port Knocking T1205"
    },
	{
      "description": "A port monitor can be set through the API call to set a DLL to be loaded at startup. This DLL can be located in C:WindowsSystem32 and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to HKLMSYSTEMCurrentControlSetControlPrintMonitors.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1013"
        ]
      },
      "uuid": "06f36dc2-fa6d-11e9-8f0b-362b9e155667",
      "value": "Port Monitors T1013"
    },
	{
      "description": "Adversaries may gain persistence and elevate privileges in certain situations by abusing PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments. PowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1504"
        ]
      },
      "uuid": "798b2492-fa6d-11e9-8f0b-362b9e155667",
      "value": "PowerShell Profile T1504"
    },
	{
      "description": "During the boot process, macOS executes source /etc/rc.common, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings, and is thus recommended to include in the start of Startup Item Scripts . In macOS and OS X, this is now a deprecated technique in favor of launch agents and launch daemons, but is currently still used.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1163"
        ]
      },
      "uuid": "798b26f4-fa6d-11e9-8f0b-362b9e155667",
      "value": "Rc common T1163"
    },
	{
      "description": "Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user reboots their machine.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1164"
        ]
      },
      "uuid": "798b2c30-fa6d-11e9-8f0b-362b9e155667",
      "value": "Re-opened Applications T1164"
    },
	{
      "description": "Adversaries may use more than one remote access tool with varying command and control protocols or credentialed access to remote services so they can maintain access if an access mechanism is detected or mitigated.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1108"
        ]
      },
      "uuid": "798b2da2-fa6d-11e9-8f0b-362b9e155667",
      "value": "Redundant Access T1108"
    },
	{
      "description": "Adding an entry to the run keys in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1060"
        ]
      },
      "uuid": "798b2ece-fa6d-11e9-8f0b-362b9e155667",
      "value": "Registry Run Keys OR Startup Folder T1060"
    },
	{
      "description": "Utilities such as at and schtasks, along with the Windows Task Scheduler, can be used to schedule programs or scripts to be executed at a date and time. A task can also be scheduled on a remote system, provided the proper authentication is met to use RPC and file and printer sharing is turned on. Scheduling a task on a remote system typically required being a member of the Administrators group on the remote system.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1053"
        ]
      },
      "uuid": "eb48c440-fa6d-11e9-8f0b-362b9e155667",
      "value": "Scheduled Task T1053"
    },
	{
      "description": "Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1180"
        ]
      },
      "uuid": "eb48c6ca-fa6d-11e9-8f0b-362b9e155667",
      "value": "Screensaver T1180"
    },
	{
      "description": "Windows Security Support Provider (SSP) DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: HKLMSYSTEMCurrentControlSetControlLsaSecurity Packages and HKLMSYSTEMCurrentControlSetControlLsaOSConfigSecurity Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1101"
        ]
      },
      "uuid": "eb48c828-fa6d-11e9-8f0b-362b9e155667",
      "value": "Security Support Provider T1101"
    },
	{
      "description": "Adversaries may abuse legitimate extensible development features of server applications to establish persistent access to systems. Enterprise server applications may include features that allow application developers to write and install software to extend the functionality of the main application. Adversaries may install malicious software components to maliciously extend and abuse server applications.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1505"
        ]
      },
      "uuid": "eb48c954-fa6d-11e9-8f0b-362b9e155667",
      "value": "Server Software Component T1505"
    },
	{
      "description": "Windows stores local service configuration information in the Registry under HKLMSYSTEMCurrentControlSetServices. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, PowerShell, or Reg. Access to Registry keys is controlled through Access Control Lists and permissions.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1058"
        ]
      },
      "uuid": "eb48cd78-fa6d-11e9-8f0b-362b9e155667",
      "value": "Service Registry Permissions Weakness T1058"
    },
	{
      "description": "When the setuid or setgid bits are set on Linux or macOS for an application, this means that the application will run with the privileges of the owning user or group respectively . Normally an application is run in the current user’s context, regardless of which user or group owns the application. There are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn’t need the elevated privileges. Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an s instead of an x when viewing a file's attributes via ls -l. The chmod program can set these bits with via bitmasking, chmod 4777 or via shorthand naming, chmod u+s.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1166"
        ]
      },
      "uuid": "507d7996-fa6e-11e9-8f0b-362b9e155667",
      "value": "Setuid and Setgid T1166"
    },
	{
      "description": "Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use Masquerading to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1023"
        ]
      },
      "uuid": "507d7bf8-fa6e-11e9-8f0b-362b9e155667",
      "value": "Shortcut Modification T1023"
    },
	{
      "description": "In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function, which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1198"
        ]
      },
      "uuid": "507d7e46-fa6e-11e9-8f0b-362b9e155667",
      "value": "SIP and Trust Provider Hijacking T1198"
    },
	{
      "description": "Per Apple’s documentation, startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items . This is technically a deprecated version (superseded by Launch Daemons), and thus the appropriate folder, /Library/StartupItems isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), StartupParameters.plist, reside in the top-level directory.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1165"
        ]
      },
      "uuid": "507d7f90-fa6e-11e9-8f0b-362b9e155667",
      "value": "Startup Items T1165"
    },
	{
      "description": "The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1019"
        ]
      },
      "uuid": "507d8184-fa6e-11e9-8f0b-362b9e155667",
      "value": "System Firmware T1019"
    },
	{
      "description": "Systemd services can be used to establish persistence on a Linux system. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1501"
        ]
      },
      "uuid": "aae56ab0-fa6e-11e9-8f0b-362b9e155667",
      "value": "Systemd Service T1501"
    },
	{
      "description": "The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1209"
        ]
      },
      "uuid": "aae56fa6-fa6e-11e9-8f0b-362b9e155667",
      "value": "Time Providers T1209"
    },
	{
      "description": "The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d. Adversaries can use this to register code to be executed when the shell encounters specific interrupts either to gain execution or as a persistence mechanism. Trap commands are of the following format trap command list signals where command list will be executed when signals are received.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1154"
        ]
      },
      "uuid": "aae57118-fa6e-11e9-8f0b-362b9e155667",
      "value": "Trap T1154"
    },
	{
      "description": "Adversaries may steal the credentials of a specific user or service account using Credential Access techniques or capture credentials earlier in their reconnaissance process through social engineering for means of gaining Initial Access.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1078"
        ]
      },
      "uuid": "aae5724e-fa6e-11e9-8f0b-362b9e155667",
      "value": "Valid Accounts T1078"
    },
	{
      "description": "A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server. In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (see, for example, China Chopper Web shell client).",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1100"
        ]
      },
      "uuid": "aae5737a-fa6e-11e9-8f0b-362b9e155667",
      "value": "Web Shell T1100"
    },
	{
      "description": "Windows Management Instrumentation (WMI) can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may attempt to evade detection of this technique by compiling WMI scripts into Windows Management Object (MOF) files (.mof extension). Examples of events that may be subscribed to are the wall clock time or the computer's uptime. Several threat groups have reportedly used this technique to maintain persistence.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1084"
        ]
      },
      "uuid": "aae5764a-fa6e-11e9-8f0b-362b9e155667",
      "value": "Windows Management Instrumentation Event Subscription T1084"
    },
	{
      "description": "Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLMSoftware[Wow6432Node]MicrosoftWindows NTCurrentVersionWinlogon and HKCUSoftwareMicrosoftWindows NTCurrentVersionWinlogon are used to manage additional helper programs and functionalities that support Winlogon.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1004"
        ]
      },
      "uuid": "aae5778a-fa6e-11e9-8f0b-362b9e155667",
      "value": "Winlogon Helper DLL T1004"
    },
	{
      "description": "Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINESoftwareMicrosoftWindows NTCurrentVersionWindows or HKEY_LOCAL_MACHINESoftwareWow6432NodeMicrosoftWindows NTCurrentVersionWindows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. Similar to Process Injection, these values can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1103"
        ]
      },
      "uuid": "d1763b8c-fa69-11e9-8f0b-362b9e155667",
      "value": "AppInit DLLs T1103"
    }
	  ],
	"version": 3
}
