{
  "category": "CWE-1-THRU-300",
  "description": "Cluster designed for tagging OSINT artifacts that relate Software Fault Pattern (SFP) Clusters CWE 1 thru 300.  All cluster items are of base taxonomy and do no include children or variants of the base CWE.",
  "name": "OSRS CWE SFP CWE 1 thru 300",
  "source": "CWE Software Fault Pattern (SFP) Clusters",
  "type": "OSRS-CMCF-BLOCK-H",
  "uuid": "feda733c-2817-11ea-978f-2e728ce88125",
  "values": [
	  {
      "description": "Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore wraps around to a very small, negative, or undefined value.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/128.html"
        ]
      },
      "uuid": "45c90dbe-2825-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-128 Wrap-around Error"
    },
	{
      "description": "An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/190.html"
        ]
      },
      "uuid": "547e38c2-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-190 Integer Overflow or Wraparound"
    },
	{
      "description": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. This can happen in signed and unsigned cases.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/191.html"
        ]
      },
      "uuid": "547e3d9a-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-191 Integer Underflow (Wrap or Wraparound)"
    },
	{
      "description": "When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/111.html"
        ]
      },
      "uuid": "547e3f16-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-197 Numeric Truncation Error"
    },
	{
      "description": "When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java. Many safety features that programmers may take for granted simply do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/111.html"
        ]
      },
      "uuid": "547e4060-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-111 Direct Use of Unsafe JNI"
    },
	{
      "description": "The program calls a function that can never be guaranteed to work safely. Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/242.html"
        ]
      },
      "uuid": "547e41be-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-242 Use of Inherently Dangerous Function"
    },
	{
      "description": "An exception is thrown from a function, but it is not caught.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/248.html"
        ]
      },
      "uuid": "547e42fe-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-248 Uncaught Exception"
    },
	{
      "description": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the software is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/252.html"
        ]
      },
      "uuid": "547e443e-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-252 Unchecked Return Value"
    },
	{
      "description": "The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. Important and common functions will return some value about the success of its actions. This will alert the program whether or not to handle any errors caused by that function.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/253.html"
        ]
      },
      "uuid": "547e47a4-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-253 Incorrect Check of Function Return Value"
    },
	{
      "description": "The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded. If the drop fails, the software will continue to run with the raised privileges, which might provide additional access to unprivileged users.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/273.html"
        ]
      },
      "uuid": "547e48ee-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-273 Improper Check for Dropped Privileges"
    },
	{
      "description": "The application does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the application in an invalid state.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/280.html"
        ]
      },
      "uuid": "547e4a24-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-280 Improper Handling of Insufficient Permissions or Privileges"
    }
	  ],
	"version": 2
}
