{
  "category": "CWE-1-THRU-300",
  "description": "Cluster designed for tagging OSINT artifacts that relate Software Fault Pattern (SFP) Clusters CWE 1 thru 300.  All cluster items are of base taxonomy and do no include children or variants of the base CWE.",
  "name": "OSRS CWE SFP CWE 1 thru 300",
  "source": "CWE Software Fault Pattern (SFP) Clusters",
  "type": "CMCF-BLOCK-OSRS",
  "uuid": "deb05256-49bf-11ea-b77f-2e728ce88125",
  "values": [
	{
      "description": "Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore wraps around to a very small, negative, or undefined value.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/128.html"
        ]
      },
      "uuid": "45c90dbe-2825-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-128 Wrap-around Error"
    },
	{
      "description": "An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/190.html"
        ]
      },
      "uuid": "547e38c2-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-190 Integer Overflow or Wraparound"
    },
	{
      "description": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. This can happen in signed and unsigned cases.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/191.html"
        ]
      },
      "uuid": "547e3d9a-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-191 Integer Underflow (Wrap or Wraparound)"
    },
	{
      "description": "When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/111.html"
        ]
      },
      "uuid": "547e3f16-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-197 Numeric Truncation Error"
    },
	{
      "description": "When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java. Many safety features that programmers may take for granted simply do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/111.html"
        ]
      },
      "uuid": "547e4060-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-111 Direct Use of Unsafe JNI"
    },
	{
      "description": "The program calls a function that can never be guaranteed to work safely. Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/242.html"
        ]
      },
      "uuid": "547e41be-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-242 Use of Inherently Dangerous Function"
    },
	{
      "description": "An exception is thrown from a function, but it is not caught.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/248.html"
        ]
      },
      "uuid": "547e42fe-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-248 Uncaught Exception"
    },
	{
      "description": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the software is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/252.html"
        ]
      },
      "uuid": "547e443e-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-252 Unchecked Return Value"
    },
	{
      "description": "The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. Important and common functions will return some value about the success of its actions. This will alert the program whether or not to handle any errors caused by that function.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/253.html"
        ]
      },
      "uuid": "547e47a4-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-253 Incorrect Check of Function Return Value"
    },
	{
      "description": "The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded. If the drop fails, the software will continue to run with the raised privileges, which might provide additional access to unprivileged users.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/273.html"
        ]
      },
      "uuid": "547e48ee-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-273 Improper Check for Dropped Privileges"
    },
	{
      "description": "The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow. A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause of buffer overflows, is the classic case in which the program copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/120.html"
        ]
      },
      "uuid": "804abb36-37ac-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-120 Buffer Copy without Checking Size of Input (Classic Buffer Overflow)"
    },
	{
      "description": "Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/123.html"
        ]
      },
      "uuid": "804ac086-37ac-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-123 Write-what-where Condition"
    },
	{
      "description": "The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/124.html"
        ]
      },
      "uuid": "804ac20c-37ac-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-124 Buffer Underwrite (Buffer Underflow)"
    },
	{
      "description": "The software reads data past the end, or before the beginning, of the intended buffer. Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash. A crash can occur when the code reads a variable amount of data and assumes that a sentinel exists to stop the read operation, such as a NUL in a string. The expected sentinel might not be located in the out-of-bounds memory, causing excessive data to be read, leading to a segmentation fault or a buffer overflow. The software may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer. A subsequent read operation then produces undefined or unexpected results.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/125.html"
        ]
      },
      "uuid": "804ac356-37ac-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-125 Out-of-bounds Read"
    },
	{
      "description": "The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/129.html"
        ]
      },
      "uuid": "804ac496-37ac-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-129 Improper Validation of Array Index"
    },
	{
      "description": "The software does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator. Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy() function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/170.html"
        ]
      },
      "uuid": "804ac5cc-37ac-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-170 Improper Null Termination"
    },
	{
      "description": "The software does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/131.html"
        ]
      },
      "uuid": "804ac6f8-37ac-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-131 Incorrect Calculation of Buffer Size"
    },
	{
      "description": "The software does not correctly calculate the length of strings that can contain wide or multi-byte characters.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/135.html"
        ]
      },
      "uuid": "804ac824-37ac-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-135 Incorrect Calculation of Multi-Byte String Length"
    },
	{
      "description": "The software attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/59.html"
        ]
      },
      "uuid": "804acbee-37ac-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-59 Improper Link Resolution Before File Access (Link Following)"
    },
	{
      "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory. Many file operations are intended to take place within a restricted directory. By using special elements, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. Path traversal also covers the use of absolute pathnames, which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/22.html"
        ]
      },
      "uuid": "804acdc4-37ac-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-22 Improper Limitation of a Pathname to a Restricted Directory (Path Traversal)"
    },
	{
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/23.html"
        ]
      },
      "uuid": "aac2d55e-37ae-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-23 Relative Path Traversal"
    },
	{
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/36.html"
        ]
      },
      "uuid": "aac2d8ce-37ae-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-36 Absolute Path Traversal"
    },
	{
      "description": "The system or application is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object. Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/41.html"
        ]
      },
      "uuid": "aac2dab8-37ae-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-41 Improper Resolution of Path Equivalence"
    },
	{
      "description": "The product does not handle or incorrectly handles a file name that identifies a virtual resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file. Virtual file names are represented like normal file names, but they are effectively aliases for other resources that do not behave like normal files. Depending on their functionality, they could be alternate entities. They are not necessarily listed in directories.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/66.html"
        ]
      },
      "uuid": "aac2dc98-37ae-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-66 Improper Handling of File Names that Identify Virtual Resources"
    },
	{
      "description": "The software does not neutralize or incorrectly neutralizes output that is written to logs. This can allow an attacker to forge log entries or inject malicious content into logs. Log forging vulnerabilities occur when data enters an application from an untrusted source, or the data is written to an application (or) system log file.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/117.html"
        ]
      },
      "uuid": "aac2de5a-37ae-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-117 Improper Output Neutralization for Logs"
    },
	{
      "description": "The software generates an error message that includes sensitive information about its environment, users, or associated data. The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/209.html"
        ]
      },
      "uuid": "aac2e062-37ae-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-209 Information Exposure Through an Error Message"
    },
	{
      "description": "The software identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/210.html"
        ]
      },
      "uuid": "aac2e1ac-37ae-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-210 Information Exposure Through Self-generated Error Message"
    },
	{
      "description": "The software performs an operation that triggers an external diagnostic or error message that is not directly generated by the software, such as an error generated by the programming language interpreter that the software uses. The error can contain sensitive system information.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/211.html"
        ]
      },
      "uuid": "aac2e3d2-37ae-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-211 Information Exposure Through Externally-Generated Error Message"
    },
	{
      "description": "The software uses a resource that contains sensitive data, but it does not properly remove that data before it stores, transfers, or shares the resource with actors in another control sphere. Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing. For example, software that is used for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/212.html"
        ]
      },
      "uuid": "aac2e5e4-37ae-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-212 Improper Cross-boundary Removal of Sensitive Data"
    },
	{
      "description": "A product's design or configuration explicitly requires the publication of information that could be regarded as sensitive by an administrator.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/213.html"
        ]
      },
      "uuid": "aac2e724-37ae-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-213 Intentional Information Exposure"
    },
	{
      "description": "The software does not fully clear previously used information in a data structure, file, or other resource, before making that resource available to a party in another control sphere. This typically results from new data that is not as long as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, it may allow unintended actors to read the data when the memory is reallocated.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/226.html"
        ]
      },
      "uuid": "c6ebdd14-37b0-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-226 Sensitive Information Uncleared Before Release"
    },
	{
      "description": "Storing a password in plaintext may result in a system compromise. Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/256.html"
        ]
      },
      "uuid": "c6ebdfee-37b0-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-256 Unprotected Storage of Credentials"
    },
	{
      "description": "The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/257.html"
        ]
      },
      "uuid": "c6ebe14c-37b0-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-257 Storing Passwords in a Recoverable Format"
    },
	{
      "description": "The product behaves differently or sends different responses in a way that exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/203.html"
        ]
      },
      "uuid": "c6ebe296-37b0-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-203 Information Exposure Through Discrepancy"
    },
	{
      "description": "The software provides different responses to incoming requests in a way that allows an actor to determine system state information that is outside of that actor's control sphere. This issue frequently occurs during authentication, where a difference in failed-login messages could allow an attacker to determine if the username is valid or not. These exposures can be inadvertent (bug) or intentional (design).",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/204.html"
        ]
      },
      "uuid": "c6ebe624-37b0-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-204 Response Discrepancy Information Exposure"
    },
	{
      "description": "The product's actions indicate important differences based on (1) the internal state of the product or (2) differences from other products in the same class. For example, attacks such as OS fingerprinting rely heavily on both behavioral and response discrepancies.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/205.html"
        ]
      },
      "uuid": "c6ebe76e-37b0-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-205 Information Exposure Through Behavioral Discrepancy"
    },
	{
      "description": "Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/208.html"
        ]
      },
      "uuid": "c6ebe89a-37b0-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-208 Information Exposure Through Timing Discrepancy"
    },
	{
      "description": "The software accepts XML from an untrusted source but does not validate the XML against the proper schema. Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/112.html"
        ]
      },
      "uuid": "c6ebe9d0-37b0-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-112 Missing XML Validation"
    },
	{
      "description": "The software receives data from an upstream component, but does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers. Including unvalidated data in an HTTP header allows an attacker to specify the entirety of the HTTP response rendered by the browser. When an HTTP request contains unexpected CR and LF characters the server may respond with an output stream that is interpreted as two different HTTP responses (instead of one). An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks. HTTP response splitting weaknesses may be present when data enters a web application through an untrusted source, most frequently an HTTP request, or the data is included in an HTTP response header sent to a web user without being validated for malicious characters.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/113.html"
        ]
      },
      "uuid": "c6ebeb06-37b0-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers (HTTP Response Splitting)"
    },
	{
      "description": "The software parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data. If an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/130.html"
        ]
      },
      "uuid": "c6ebec32-37b0-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-130 Improper Handling of Length Parameter Inconsistency"
    },
	{
      "description": "The software uses a function that accepts a format string as an argument, but the format string originates from an external source. When an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems. It should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/134.html"
        ]
      },
      "uuid": "d5d02f54-37b2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-134 Use of Externally-Controlled Format String"
    },
	{
      "description": "The software does not neutralize or incorrectly neutralizes delimiters.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/140.html"
        ]
      },
      "uuid": "d5d0321a-37b2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-140 Improper Neutralization of Delimiters"
    },
	{
      "description": "An application uses a whitelist of acceptable values, but the whitelist includes at least one unsafe value, leading to resultant weaknesses.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/183.html"
        ]
      },
      "uuid": "d5d03666-37b2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-183 Permissive Whitelist"
    },
	{
      "description": "An application uses a blacklist of prohibited values, but the blacklist is incomplete. If an incomplete blacklist is used as a security mechanism, then the software may allow unintended values to pass into the application logic.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/184.html"
        ]
      },
      "uuid": "d5d037c4-37b2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-184 Incomplete Blacklist"
    },
	{
      "description": "The software specifies a regular expression in a way that causes data to be improperly matched or compared. When the regular expression is used in protection mechanisms such as filtering or validation, this may allow an attacker to bypass the intended restrictions on the incoming data.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/185.html"
        ]
      },
      "uuid": "d5d03904-37b2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-185 Incorrect Regular Expression"
    },
	{
      "description": "A regular expression is overly restrictive, which prevents dangerous values from being detected. This weakness is not about regexp complexity. Rather It is about a regular expression that does not match all values that are intended. Consider the use of a regexp to whitelist acceptable values or to blacklist unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives or false negatives, depending on how the regexp is being used within the code.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/186.html"
        ]
      },
      "uuid": "d5d03a3a-37b2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-186 Overly Restrictive Regular Expression"
    },
	{
      "description": "The software properly neutralizes certain special elements, but it improperly neutralizes equivalent special elements. The software may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/76.html"
        ]
      },
      "uuid": "d5d03b66-37b2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-76 Improper Neutralization of Equivalent Special Elements"
    },
	{
      "description": "The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/78.html"
        ]
      },
      "uuid": "d5d03c92-37b2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-78 Improper Neutralization of Special Elements used in an OS Command (OS Command Injection)"
    },
	{
      "description": "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users. Cross-site scripting (XSS) vulnerabilities occur when ntrusted data enters a web application, typically from a web request. The web application dynamically generates a web page that contains this untrusted data. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as drive-by hacking. In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/79.html"
        ]
      },
      "uuid": "d5d04002-37b2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-79 Improper Neutralization of Input During Web Page Generation (Cross-site Scripting)"
    },
	{
      "description": "The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string. When creating commands using interpolation into a string, developers may assume that only the arguments and (or) options that they specify will be processed. This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters. When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer. The attacker may then be able to change the behavior of the command. Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/88.html"
        ]
      },
      "uuid": "d5d04156-37b2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-88 Improper Neutralization of Argument Delimiters in a Command (Argument Injection)"
    },
	{
      "description": "The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/89.html"
        ]
      },
      "uuid": "08098d50-37bb-11ea-aec2-2e728ce88125",
      "value": "OSRS CWE: CWE-89 Improper Neutralization of Special Elements used in an SQL Command (SQL Injection)"
    },
	{
      "description": "The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/90.html"
        ]
      },
      "uuid": "08098fc6-37bb-11ea-aec2-2e728ce88125",
      "value": "OSRS CWE: CWE-90 Improper Neutralization of Special Elements used in an LDAP Query (LDAP Injection)"
    },
	{
      "description": "The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system. Within XML, special elements could include reserved words or characters which could then be used to add new data or modify XML syntax.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/91.html"
        ]
      },
      "uuid": "080992d2-37bb-11ea-aec2-2e728ce88125",
      "value": "OSRS CWE: CWE-91 XML Injection (aka Blind XPath Injection)"
    },
	{
      "description": "The software uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/93.html"
        ]
      },
      "uuid": "08099430-37bb-11ea-aec2-2e728ce88125",
      "value": "OSRS CWE: CWE-93 Improper Neutralization of CRLF Sequences (CRLF Injection)"
    },
	{
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/96.html"
        ]
      },
      "uuid": "0809957a-37bb-11ea-aec2-2e728ce88125",
      "value": "OSRS CWE: CWE-96 Improper Neutralization of Directives in Statically Saved Code (Static Code Injection)"
    },
	{
      "description": "The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control. A resource injection issue occurs when the following two conditions are met - An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server. This may enable an attacker to access or modify otherwise protected system resources.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/99.html"
        ]
      },
      "uuid": "080996ba-37bb-11ea-aec2-2e728ce88125",
      "value": "OSRS CWE: CWE-99 Improper Control of Resource Identifiers (Resource Injection)"
    },
	{
      "description": "Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. Process control vulnerabilities take two forms - 1. An attacker can change the command that the program executes the attacker explicitly controls what the command is. 2. An attacker can change the environment in which the command executes the attacker implicitly controls what the command means. Process control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/114.html"
        ]
      },
      "uuid": "080997f0-37bb-11ea-aec2-2e728ce88125",
      "value": "OSRS CWE: CWE-114 Process Control"
    },
	{
      "description": "The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment. When software allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution. Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/94.html"
        ]
      },
      "uuid": "08099aca-37bb-11ea-aec2-2e728ce88125",
      "value": "OSRS CWE: CWE-94 Improper Control of Generation of Code (Code Injection)"
    },
	{
      "description": "The software receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/166.html"
        ]
      },
      "uuid": "08099c28-37bb-11ea-aec2-2e728ce88125",
      "value": "OSRS CWE: CWE-166 Improper Handling of Missing Special Element"
    },
	{
      "description": "The software receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is missing.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/167.html"
        ]
      },
      "uuid": "08099de0-37bb-11ea-aec2-2e728ce88125",
      "value": "OSRS CWE: CWE-167 Improper Handling of Additional Special Element"
    },
	{
      "description": "The software does not handle when an inconsistency exists between two or more special characters or reserved words. An example of this problem would be if paired characters appear in the wrong order, or if the special characters are not properly nested.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/168.html"
        ]
      },
      "uuid": "3b018242-37bd-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-168 Improper Handling of Inconsistent Special Elements"
    },
	{
      "description": "The software does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results. Improperly handled case sensitive data can lead to several possible consequences, including - case-insensitive passwords reducing the size of the key space, making brute force attacks easier, bypassing filters or access controls using alternate names, or multiple interpretation errors using alternate names.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/178.html"
        ]
      },
      "uuid": "3b018508-37bd-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-178 Improper Handling of Case Sensitivity"
    },
	{
      "description": "The software validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification. Software needs to validate data at the proper time, after data has been canonicalized and cleansed. Early validation is susceptible to various manipulations that result in dangerous inputs that are produced by canonicalization and cleansing.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/179.html"
        ]
      },
      "uuid": "3b018986-37bd-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-179 Incorrect Behavior Order (Early Validation)"
    },
	{
      "description": "The software validates input before it is canonicalized, which prevents the software from detecting data that becomes invalid after the canonicalization step. This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/180.html"
        ]
      },
      "uuid": "3b018b0c-37bd-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-180 Incorrect Behavior Order (Validate Before Canonicalize)"
    },
	{
      "description": "The software validates data before it has been filtered, which prevents the software from detecting data that becomes invalid after the filtering step. This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/181.html"
        ]
      },
      "uuid": "3b018c56-37bd-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-181 Incorrect Behavior Order (Validate Before Filter)"
    },
	{
      "description": "The software filters data in a way that causes it to be reduced or collapsed into an unsafe value that violates an expected security property.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/182.html"
        ]
      },
      "uuid": "3b018d8c-37bd-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-182 Collapse of Data into Unsafe Value"
    },
	{
      "description": "The software receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/198.html"
        ]
      },
      "uuid": "3b018ec2-37bd-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-198 Use of Incorrect Byte Ordering"
    },
	{
      "description": "The software does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/229.html"
        ]
      },
      "uuid": "3b018ff8-37bd-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-229 Improper Handling of Values"
    },
	{
      "description": "The software does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/233.html"
        ]
      },
      "uuid": "3b0193b8-37bd-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-233 Improper Handling of Parameters"
    },
	{
      "description": "The software does not handle or incorrectly handles inputs that are related to complex structures.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/237.html"
        ]
      },
      "uuid": "3b01952a-37bd-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-237 Improper Handling of Structural Elements"
    },
	{
      "description": "The software does not handle or incorrectly handles when two or more structural elements should be consistent, but are not.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/240.html"
        ]
      },
      "uuid": "142db1ca-37bf-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-240 Improper Handling of Inconsistent Structural Elements"
    },
	{
      "description": "The software does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/241.html"
        ]
      },
      "uuid": "142db440-37bf-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-241 Improper Handling of Unexpected Data Type"
    },
	{
      "description": "One or more system settings or configuration elements can be externally controlled by a user. Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/15.html"
        ]
      },
      "uuid": "142db79c-37bf-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-15 External Control of System or Configuration Setting"
    },
	{
      "description": "A product requires authentication, but the product has an alternate path or channel that does not require authentication.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/288.html"
        ]
      },
      "uuid": "142db9e0-37bf-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-288 Authentication Bypass Using an Alternate Path or Channel"
    },
	{
      "description": "The software does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate. If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate. In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate. There are several ways in which the chain of trust might be broken, including but not limited to - any certificate in the chain is self-signed, unless it the root. Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate. An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions. The root certificate has been compromised or authorized to the wrong party.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/296.html"
        ]
      },
      "uuid": "142dbb3e-37bf-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-296 Improper Following of a Certificate's Chain of Trust"
    },
	{
      "description": "The software does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised. An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/299.html"
        ]
      },
      "uuid": "142dbc74-37bf-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-299 Improper Check for Certificate Revocation"
    },
	{
      "description": "The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components. A hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/259.html"
        ]
      },
      "uuid": "142dbdb4-37bf-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-259 Use of Hard-coded Password"
    },
	{
      "description": "Allowing password aging to occur unchecked can result in the possibility of diminished password integrity. Just as neglecting to include functionality for the management of password aging is dangerous, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span, after which a user is required to update with a new and different password.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/263.html"
        ]
      },
      "uuid": "142dbeea-37bf-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-263 Password Aging with Long Expiration"
    },
	{
      "description": "The software does not properly verify that a critical resource is owned by the proper entity.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/283.html"
        ]
      },
      "uuid": "142dc02a-37bf-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-283 Unverified Ownership"
    },
	{
      "description": "The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/276.html"
        ]
      },
      "uuid": "142dc318-37bf-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-276 Incorrect Default Permissions"
    },
	{
      "description": "The software does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/281.html"
        ]
      },
      "uuid": "3406e442-37c1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-281 Improper Preservation of Permissions"
    },
	{
      "description": "A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/266.html"
        ]
      },
      "uuid": "3406e6fe-37c1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-266 Incorrect Privilege Assignment"
    },
	{
      "description": "A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/267.html"
        ]
      },
      "uuid": "3406e866-37c1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-267 Privilege Defined With Unsafe Actions"
    },
	{
      "description": "Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/268.html"
        ]
      },
      "uuid": "3406ec26-37c1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-268 Privilege Chaining"
    },
	{
      "description": "The software does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/270.html"
        ]
      },
      "uuid": "3406ed70-37c1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-270 Privilege Context Switching Error"
    },
	{
      "description": "The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/272.html"
        ]
      },
      "uuid": "3406eeb0-37c1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-272 Least Privilege Violation"
    },
	{
      "description": "The software does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/274.html"
        ]
      },
      "uuid": "3406eff0-37c1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-274 Improper Handling of Insufficient Privileges"
    },
	{
      "description": "This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/290.html"
        ]
      },
      "uuid": "3406f126-37c1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-290 Authentication Bypass by Spoofing"
    },
	{
      "description": "A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes). Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/294.html"
        ]
      },
      "uuid": "3406f252-37c1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-294 Authentication Bypass by Capture-replay"
    },
	{
      "description": "The application truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/222.html"
        ]
      },
      "uuid": "3406f568-37c1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-222 Truncation of Security-relevant Information"
    },
	{
      "description": "The application does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/223.html"
        ]
      },
      "uuid": "ec54b050-37c2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-223 Omission of Security-relevant Information"
    },
	{
      "description": "The software records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/224.html"
        ]
      },
      "uuid": "ec54b30c-37c2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-224 Obscured Security-relevant Information by Alternate Name"
    },
	{
      "description": "The software misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/115.html"
        ]
      },
      "uuid": "ec54b460-37c2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-115 Misinterpretation of Input"
    },
	{
      "description": "The software makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/188.html"
        ]
      },
      "uuid": "ec54b5a0-37c2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-188 Reliance on Data and (or) Memory Layout"
    },
	{
      "description": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/193.html"
        ]
      },
      "uuid": "ec54b6d6-37c2-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-193 Off-by-one Error"
    },
	{
      "description": "The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/269.html"
        ]
      },
      "uuid": "6a94882e-6319-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-269 Improper Privilege Management"
    },
	{
      "description": "The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/20.html"
        ]
      },
      "uuid": "6a948b44-6319-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-20 Improper Input Validation"
    },
	{
      "description": "The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component. Command injection vulnerabilities typically occur when data enters the application from an untrusted source, the data is part of a string that is executed as a command by the application, or by executing the command, the application gives an attacker a privilege (or capability that the attacker would not otherwise have). Command injection is a common problem with wrapper programs.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/77.html"
        ]
      },
      "uuid": "6a948c48-6319-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection')"
    },
	{
      "description": "The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/20.html"
        ]
      },
      "uuid": "4350bdda-63de-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-20 Improper Input Validation"
    },
	{
      "description": "The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data. As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash. The generic term memory corruption is often used to describe the consequences of writing to memory outside the bounds of a buffer, when the root cause is something other than a sequential copies of excessive data from a fixed starting location (i.e., classic buffer overflows or CWE-120). This may include issues such as incorrect pointer arithmetic, accessing invalid pointers due to incomplete initialization or memory release, etc.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/119.html"
        ]
      },
      "uuid": "649c655c-63de-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer"
    },
	{
      "description": "The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/269.html"
        ]
      },
      "uuid": "649c6782-63de-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-269 Improper Privilege Management"
    },
	{
      "description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information. There are many different kinds of mistakes that introduce information exposures. The severity of the error can range widely, depending on the context in which the product operates, the type of sensitive information that is revealed, and the benefits it may provide to an attacker. Some kinds of sensitive information include - private, personal information, such as personal messages, financial data, health records, geographic location, or contact details, system status and environment, such as the operating system and installed packages, business secrets and intellectual property, network status and configuration, the product's own code or internal state metadata (e.g. logging of connections or message headers), indirect information, such as a discrepancy between two internal operations that can be observed by an outsider. Information might be sensitive to different parties, each of which may have their own expectations for whether the information should be protected. These parties include - the product's own users, people or organizations whose information is created or used by the product, even if they are not direct product users, the product's administrators, including the admins of the system(s) and (or) networks on which the product operates, or the developer. Information exposures can occur in different ways. The code explicitly inserts sensitive information into resources that are made accessible to unauthorized actors, or a different weakness or mistake inadvertently makes the sensitive information available, such as a web script error revealing the full system path of the program.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/200.html"
        ]
      },
      "uuid": "649c687c-63de-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-200 Exposure of Sensitive Information to an Unauthorized Actor"
    },
	{
      "description": "The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor. Access control involves the use of several protection mechanisms such as authentication (proving the identity of an actor), authorization (ensuring that a given actor can access a resource), and accountability (tracking of activities that were performed). When any mechanism is not applied or otherwise fails, attackers can compromise the security of the software by gaining privileges, reading sensitive information, executing commands, evading detection, etc. There are two distinct behaviors that can introduce access control weaknesses. Specification - incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator. Enforcement - the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/284.html"
        ]
      },
      "uuid": "649c694e-63de-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-284 Improper Access Control"
    },
	{
      "description": "The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component. Software has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/74.html"
        ]
      },
      "uuid": "923c2e42-6524-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')"
    },
	{
      "description": "The software does not validate, or incorrectly validates, a certificate. When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/295.html"
        ]
      },
      "uuid": "3096bb9a-67b2-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-295 Improper Certificate Validation"
    },
	{
      "description": "Weaknesses in this category are related to the management of permissions, privileges, and other security features that are used to perform access control.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/264.html"
        ]
      },
      "uuid": "3096be06-67b2-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-264 Permissions, Privileges, and Access Controls"
    },
	{
      "description": "Weaknesses in this category are related to improper assignment or handling of permissions.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/275.html"
        ]
      },
      "uuid": "ea3f3f82-6d1f-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-275 Permission Issues"
    },
	{
      "description": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/122.html"
        ]
      },
      "uuid": "02b6f50c-7200-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-122 Heap-based Buffer Overflow"
    },
	{
      "description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). Stack Overflow is often used to mean the same thing as stack-based buffer overflow, however it is also used on occasion to mean stack exhaustion, usually a result from an excessively recursive function call. Due to the ambiguity of the term, use of stack overflow to describe either circumstance is discouraged.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/121.html"
        ]
      },
      "uuid": "02b6f78c-7200-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-121 Stack-based Buffer Overflow"
    },
	{
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component. As data is parsed, an injected element may cause the process to take unexpected actions.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/155.html"
        ]
      },
      "uuid": "02b6f93a-7200-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-155 Improper Neutralization of Wildcards or Matching Symbols"
    },
	{
      "description": "Parent category for multiple CWE related to errors in credential management (e.g., CWE 635, CWE 699, CWE 256 etc.)",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/255.html"
        ]
      },
      "uuid": "02b6fa52-7200-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-255 Credentials Management Errors"
    },
	{
      "description": "The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action. Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution. AuthZ is typically used as an abbreviation of authorization within the web application security community. It is also distinct from AuthC, which is an abbreviation of authentication. The use of Auth as an abbreviation is discouraged, since it could be used for either authentication or authorization.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/285.html"
        ]
      },
      "uuid": "02b6fb2e-7200-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-285 Improper Authorization"
    },
	{
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. eval). This may allow an attacker to execute arbitrary code, or at least modify what code can be executed.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/95.html"
        ]
      },
      "uuid": "1f18f7c2-74da-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
    },
	{
      "description": "Parent category that covers several security feature CWE (e.g., CWE 700, CWE 256, CWE 261 et al.).",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/254.html"
        ]
      },
      "uuid": "1f18f9de-74da-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-254 7PK - Security Features"
    },
	{
      "description": "When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/287.html"
        ]
      },
      "uuid": "6c745414-83c9-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-287 Improper Authentication"
    },
	{
      "description": "The code transmits data to another actor, but the data contains sensitive information that should not be accessible to the actor that is receiving the data. Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/201.html"
        ]
      },
      "uuid": "cd8d1ba6-8fb2-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-201 Exposure of Sensitive Information Through Sent Data"
    },
	{
      "description": "The software allows user input to control or influence paths or file names that are used in filesystem operations. This could allow an attacker to access or modify system files or other files that are critical to the application. Path manipulation errors occur when the following two conditions are met 1) An attacker can specify a path used in an operation on the filesystem, and 2) By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/73.html"
        ]
      },
      "uuid": "cd8d1dae-8fb2-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-73 External Control of File Name or Path"
    },
	{
      "description": "The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in require, include, or similar functions. In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the software will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/98.html"
        ]
      },
      "uuid": "cd8d1ea8-8fb2-11ea-bc55-0242ac130003",
      "value": "OSRS CWE: CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"
    },
	{
      "description": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint. In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/300.html"
        ]
      },
      "uuid": "7aae78ea-9ac9-11ea-bb37-0242ac130002",
      "value": "OSRS CWE: CWE-300 Channel Accessible by Non-Endpoint"
    },
	{
      "description": "Parent category. Weaknesses in this category are related to improper calculation or conversion of numbers. Includes subcategories such as Wrap-around Error and Integer Overflow.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/189.html"
        ]
      },
      "uuid": "6b4d9a1e-a5c0-11ea-bb37-0242ac130002",
      "value": "OSRS CWE: CWE-189 Numeric Errors"
    },
	{
      "description": "Parent category. Weaknesses in this category are typically found in functionality that processes data. Data processing is the manipulation of input to retrieve or save information. Includes subcategories such as Improper Handling of Values and Permissive Regular Expression.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/19.html"
        ]
      },
      "uuid": "6b4d9ca8-a5c0-11ea-bb37-0242ac130002",
      "value": "OSRS CWE: CWE-19 Data Processing Errors"
    },
	{
      "description": "The software prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved. Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead. Most software follows a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/116.html"
        ]
      },
      "uuid": "ca1bffde-b099-11ea-b3de-0242ac130004",
      "value": "OSRS CWE: CWE-116 Improper Encoding or Escaping of Output"
    },
	{
      "description": "Parent category regarding issues with system privileges. Includes child categories like Privilege Chaining and Improper Check for Dropped Privileges.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/265.html"
        ]
      },
      "uuid": "fbe8d994-b6e1-11ea-b3de-0242ac130004",
      "value": "OSRS CWE: CWE-265 Privilege Issues"
    },
	{
      "description": "Parent category that encompasses configuration weaknesses such as those found in software or hardware configurations.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/16.html"
        ]
      },
      "uuid": "2dd63120-031f-11eb-adc1-0242ac120002",
      "value": "OSRS CWE: CWE-16 Configuration"
    },
	{
      "description": "The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses. New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/250.html"
        ]
      },
      "uuid": "db0963ac-146e-11eb-adc1-0242ac120002",
      "value": "OSRS CWE: CWE-250 Execution with Unnecessary Privileges"
    },
	{
      "description": "The application does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the application in an invalid state.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 1 thru 300"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/280.html"
        ]
      },
      "uuid": "547e4a24-2ca1-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-280 Improper Handling of Insufficient Permissions or Privileges"
    }
	  ],
	"version": 16
}
