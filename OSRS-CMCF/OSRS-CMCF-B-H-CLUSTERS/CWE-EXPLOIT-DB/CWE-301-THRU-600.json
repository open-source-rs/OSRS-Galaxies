{
  "category": "CWE-301-THRU-600",
  "description": "Cluster designed for tagging OSINT artifacts that relate Software Fault Pattern (SFP) Clusters CWE 301 thru 600.  All cluster items are of base taxonomy and do no include children or variants of the base CWE.",
  "name": "OSRS CWE SFP CWE 301 thru 600",
  "source": "CWE Software Fault Pattern (SFP) Clusters",
  "type": "CMCF-BLOCK-OSRS",
  "uuid": "deb05256-49bf-11ea-b77f-2e728ce88125",
  "values": [
	{
      "description": "This weakness typically occurs when an unexpected value is provided to the product, or if an error occurs that is not properly detected. It frequently occurs in calculations involving physical dimensions such as size, length, width, and height.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/369.html"
        ]
      },
      "uuid": "7bad9aea-29af-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-369 Divide By Zero"
    },
	{
      "description": "A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/439.html"
        ]
      },
      "uuid": "c7bcff2e-386a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-439 Behavioral Change in New Version or Environment"
    },
	{
      "description": "The application uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running. During the execution of a signal handler, it can be interrupted by another handler when a different signal is sent. If the two handlers share state - such as global variables - then an attacker can corrupt the state by sending another signal before the first handler has completed execution.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/432.html"
        ]
      },
      "uuid": "c7bd029e-386a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-432 Dangerous Signal Handler not Disabled During Sensitive Operations"
    },
	{
      "description": "The software contains dead code, which can never be executed. Dead code is source code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/561.html"
        ]
      },
      "uuid": "c7bd0406-386a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-561 Dead Code"
    },
	{
      "description": "A feature, API, or function being used by a product behaves differently than the product expects.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/440.html"
        ]
      },
      "uuid": "c7bd0604-386a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-440 Expected Behavior Violation"
    },
	{
      "description": "In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/468.html"
        ]
      },
      "uuid": "c7bd074e-386a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-468 Incorrect Pointer Scaling"
    },
	{
      "description": "A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/466.html"
        ]
      },
      "uuid": "c7bd0992-386a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-466 Return of Pointer Value Outside of Expected Range"
    },
	{
      "description": "A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash. Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function's stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/562.html"
        ]
      },
      "uuid": "c7bd0adc-386a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-562 Return of Stack Variable Address"
    },
	{
      "description": "The behavior of this function is undefined unless its control parameter is set to a specific value.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/475.html"
        ]
      },
      "uuid": "c7bd0cee-386a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-475 Undefined Behavior for Input to API"
    },
	{
      "description": "The code uses a function that has inconsistent implementations across operating systems and versions. The use of inconsistent implementations can cause changes in behavior when the code is ported or built under a different environment than the programmer expects, which can lead to security problems in some cases. The implementation of many functions varies by platform, and at times, even by different versions of the same platform. Implementation differences can include - Slight differences in the way parameters are interpreted leading to inconsistent results. Some implementations of the function carry significant security risks. The function might not be defined on all platforms. The function might change which return codes it can provide, or change the meaning of its return codes.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/474.html"
        ]
      },
      "uuid": "c7bd0ed8-386a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-474 Use of Function with Inconsistent Implementations"
    },
	{
      "description": "The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained. As programming languages evolve, functions occasionally become obsolete due to advances in the language, improved understanding of how operations should be performed effectively and securely, or changes in the conventions that govern certain operations. Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/477.html"
        ]
      },
      "uuid": "c7bd10ae-386a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-477 Use of Obsolete Function"
    },
	{
      "description": "The code uses a variable that has not been initialized, leading to unpredictable or unintended results. In some languages such as C and C++, stack variables are not initialized by default. They generally contain junk data with the contents of stack memory before the function was invoked. An attacker can sometimes control or read these contents. In other languages or conditions, a variable that is not explicitly initialized can be given a default value that has security implications, depending on the logic of the program. The presence of an uninitialized variable can sometimes indicate a typographic error in the code.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/457.html"
        ]
      },
      "uuid": "a392ccd0-386c-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-457 Use of Uninitialized Variable"
    },
	{
      "description": "Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities. Multiple catch blocks can get ugly and repetitive, but condensing catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of Java's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/396.html"
        ]
      },
      "uuid": "a392cf78-386c-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-396 Declaration of Catch for Generic Exception"
    },
	{
      "description": "Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities. Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/397.html"
        ]
      },
      "uuid": "a392d0c2-386c-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-397 Declaration of Throws for Generic Exception"
    },
	{
      "description": "The software encounters an error but does not provide a status code or return value to indicate that an error has occurred.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/392.html"
        ]
      },
      "uuid": "a392d1f8-386c-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-392 Missing Report of Error Condition"
    },
	{
      "description": "A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result. This can lead to unpredictable behavior. If the function is used to make security-critical decisions or provide security-critical information, then the wrong status code can cause the software to assume that an action is safe, even when it is not.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/393.html"
        ]
      },
      "uuid": "a392d5a4-386c-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-393 Return of Wrong Status Code"
    },
	{
      "description": "The software does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error, which can cause the software to execute in a less secure fashion than intended by the administrator.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/455.html"
        ]
      },
      "uuid": "a392d6f8-386c-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-455 Non-exit on Failed Initialization"
    },
	{
      "description": "The software does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses. If the application handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/544.html"
        ]
      },
      "uuid": "a392d824-386c-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-544 Missing Standardized Error Handling Mechanism"
    },
	{
      "description": "The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/584.html"
        ]
      },
      "uuid": "a392d95a-386c-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-584 Return Inside Finally Block"
    },
	{
      "description": "The software does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/372.html"
        ]
      },
      "uuid": "a392da7c-386c-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-372 Incomplete Internal State Distinction"
    },
	{
      "description": "Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/391.html"
        ]
      },
      "uuid": "a392df04-386c-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-391 Unchecked Error Condition"
    },
	{
      "description": "The software does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the software.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/394.html"
        ]
      },
      "uuid": "ea9cc462-3873-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-394 Unexpected Status Code or Return Value"
    },
	{
      "description": "Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer. Programmers typically catch NullPointerException under three circumstances - The program contains a null pointer dereference. Catching the resulting exception was easier than fixing the underlying problem. The program explicitly throws a NullPointerException to signal an error condition. The code is part of a test harness that supplies unexpected input to the classes under test. Of these three circumstances, only the last is acceptable.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/395.html"
        ]
      },
      "uuid": "ea9cc71e-3873-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-395 Use of NullPointerException Catch to Detect NULL Pointer Dereference"
    },
	{
      "description": "A handler is not available or implemented. When an exception is thrown and not caught, the process has given up an opportunity to decide if a given failure or event is worth a change in execution.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/431.html"
        ]
      },
      "uuid": "ea9cc91c-3873-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-431 Missing Handler"
    },
	{
      "description": "The program omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition. This can lead to critical code executing in situations where it should not.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/484.html"
        ]
      },
      "uuid": "ea9cca7a-3873-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-484 Omitted Break Statement in Switch"
    },
	{
      "description": "The Servlet does not catch all exceptions, which may reveal sensitive debugging information. When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/600.html"
        ]
      },
      "uuid": "ea9ccbba-3873-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-600 Uncaught Exception in Servlet"
    },
	{
      "description": "The application subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk. The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/469.html"
        ]
      },
      "uuid": "ea9ccd04-3873-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-469 Use of Pointer Subtraction to Determine Size"
    },
	{
      "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/476.html"
        ]
      },
      "uuid": "ea9cce44-3873-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-476 NULL Pointer Dereference"
    },
	{
      "description": "The software does not properly clean up and remove temporary or supporting resources after they have been used.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/459.html"
        ]
      },
      "uuid": "ea9ccf84-3873-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-459 Incomplete Cleanup"
    },
	{
      "description": "A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/386.html"
        ]
      },
      "uuid": "ea9cd0ba-3873-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-386 Symbolic Name not Mapping to Correct Object"
    },
	{
      "description": "The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path. If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as C_Program.exe to be run by a privileged program making use of WinExec.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/428.html"
        ]
      },
      "uuid": "ea9cd1f0-3873-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-428 Unquoted Search Path or Element"
    },
	{
      "description": "The software uses a signal handler that introduces a race condition. Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the software state to be corrupted, possibly leading to a denial of service or even code execution. These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the regular code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered. Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/364.html"
        ]
      },
      "uuid": "2965f5d6-3876-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-364 Signal Handler Race Condition"
    },
	{
      "description": "The code contains a switch statement in which the switched variable can be modified while the switch is still executing, resulting in unexpected behavior. This issue is particularly important in the case of switch statements that involve fall-through style case statements - ie., those which do not end with break. If the variable being tested by the switch changes in the course of execution, this could change the intended logic of the switch so much that it places the process in a contradictory state and in some cases could even result in memory corruption.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/365.html"
        ]
      },
      "uuid": "2965f892-3876-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-365 Race Condition in Switch"
    },
	{
      "description": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/366.html"
        ]
      },
      "uuid": "2965fb08-3876-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-366 Race Condition within a Thread"
    },
	{
      "description": "A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch. This is commonly seen in web browser vulnerabilities in which the attacker can perform certain actions while the browser is transitioning from a trusted to an untrusted domain, or vice versa, and the browser performs the actions on one domain using the trust level and resources of the other domain.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/368.html"
        ]
      },
      "uuid": "2965fc48-3876-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-368 Context Switching Race Condition"
    },
	{
      "description": "The software does not lock or does not correctly lock a resource when the software must have exclusive access to the resource. When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the software. This might violate the software's assumption that the resource will not change, potentially leading to unexpected behaviors.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/413.html"
        ]
      },
      "uuid": "29660062-3876-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-413 Improper Resource Locking"
    },
	{
      "description": "A product does not check to see if a lock is present before performing sensitive operations on a resource.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/414.html"
        ]
      },
      "uuid": "296601ca-3876-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-414 Missing Lock Check"
    },
	{
      "description": "The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes. Within servlets, shared static variables are not protected from concurrent access, but servlets are multithreaded. This is a typical programming mistake in J2EE applications, since the multithreading is handled by the framework. When a shared variable can be influenced by an attacker, one thread could wind up modifying the variable to contain data that is not valid for a different thread that is also using the data within the variable. Note that this weakness is not unique to servlets.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/567.html"
        ]
      },
      "uuid": "2966030a-3876-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-567 Unsynchronized Access to Shared Data in a Multithreaded Context"
    },
	{
      "description": "The software checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the software to access the wrong file. While developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the software to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/363.html"
        ]
      },
      "uuid": "29660436-3876-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-363 Race Condition Enabling Link Following"
    },
	{
      "description": "The software checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state. This weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/367.html"
        ]
      },
      "uuid": "29660562-3876-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-367 Time-of-check Time-of-use (TOCTOU) Race Condition"
    },
	{
      "description": "The software properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control. This prevents the software from acting on associated resources or performing other behaviors that are controlled by the presence of the lock. Relevant locks might include an exclusive lock or mutex, or modifying a shared resource that is treated as a lock. If the lock can be held for an indefinite period of time, then the denial of service could be permanent.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/412.html"
        ]
      },
      "uuid": "29660878-3876-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-412 Unrestricted Externally Accessible Lock"
    },
	{
      "description": "The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere. Because the information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/312.html"
        ]
      },
      "uuid": "4d6d549e-3879-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-312 Cleartext Storage of Sensitive Information"
    },
	{
      "description": "The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. Many communication channels can be sniffed by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/319.html"
        ]
      },
      "uuid": "4d6d5728-3879-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-319 Cleartext Transmission of Sensitive Information"
    },
	{
      "description": "The program sends non-cloned mutable data as an argument to a method or function. The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/374.html"
        ]
      },
      "uuid": "4d6d587c-3879-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-374 Passing Mutable Objects to an Untrusted Method"
    },
	{
      "description": "Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function. In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/375.html"
        ]
      },
      "uuid": "4d6d59a8-3879-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-375 Returning a Mutable Object to an Untrusted Caller"
    },
	{
      "description": "A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized input output operations using those descriptors. When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/403.html"
        ]
      },
      "uuid": "4d6d5ade-3879-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-403 Exposure of File Descriptor to Unintended Control Sphere (File Descriptor Leak)"
    },
	{
      "description": "The product mixes trusted and untrusted data in the same data structure or structured message. A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/501.html"
        ]
      },
      "uuid": "4d6d5c14-3879-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-501 Trust Boundary Violation"
    },
	{
      "description": "This weakness occurs when the application transmits or stores authentication credentials and uses an insecure method that is susceptible to unauthorized interception and (or) retrieval.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/522.html"
        ]
      },
      "uuid": "4d6d5fa2-3879-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-522 Insufficiently Protected Credentials"
    },
	{
      "description": "The product stores sensitive information in files or directories that are accessible to actors outside of the intended control sphere.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/538.html"
        ]
      },
      "uuid": "4d6d610a-3879-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-538 File and Directory Information Exposure"
    },
	{
      "description": "Files or directories are accessible in the environment that should not be.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/552.html"
        ]
      },
      "uuid": "4d6d6236-3879-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-552 Files or Directories Accessible to External Parties"
    },
	{
      "description": "Creating and using insecure temporary files can leave application and system data vulnerable to attack.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/377.html"
        ]
      },
      "uuid": "4d6d6362-3879-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-377 Insecure Temporary File"
    },
	{
      "description": "Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/378.html"
        ]
      },
      "uuid": "1af005c8-387b-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-378 Creation of Temporary File With Insecure Permissions"
    },
	{
      "description": "When malformed or abnormal HTTP requests are interpreted by one or more entities in the data flow between the user and the web server, such as a proxy or firewall, they can be interpreted inconsistently, allowing the attacker to smuggle a request to one device without the other device being aware of it.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/444.html"
        ]
      },
      "uuid": "1af009ce-387b-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-444 Inconsistent Interpretation of HTTP Requests (HTTP Request Smuggling)"
    },
	{
      "description": "The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. Although this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as tmp or the current working directory. In Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled - the directory from which the program has been loaded, and (or) the current working directory. In some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used. In some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/427.html"
        ]
      },
      "uuid": "1af00b36-387b-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-427 Uncontrolled Search Path Element"
    },
	{
      "description": "The application uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code. If the application uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the application to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the application's classpath (CWE-427) or add new entries to the application's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the application.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/470.html"
        ]
      },
      "uuid": "1af00d02-387b-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-470 Use of Externally-Controlled Input to Select Classes or Code (Unsafe Reflection)"
    },
	{
      "description": "The software does not properly protect an assumed-immutable element from being modified by an attacker. This occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/471.html"
        ]
      },
      "uuid": "1af010e0-387b-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-471 Modification of Assumed-Immutable Data (MAID)"
    },
	{
      "description": "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields. If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input. For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/472.html"
        ]
      },
      "uuid": "1af0122a-387b-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-472 External Control of Assumed-Immutable Web Parameter"
    },
	{
      "description": "The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code. An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/494.html"
        ]
      },
      "uuid": "1af01356-387b-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-494 Download of Code Without Integrity Check"
    },
	{
      "description": "The software does not properly distinguish between different types of elements in a way that leads to insecure behavior.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/351.html"
        ]
      },
      "uuid": "1af01482-387b-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-351 Insufficient Type Distinction"
    },
	{
      "description": "The software does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission. Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/354.html"
        ]
      },
      "uuid": "1af015a4-387b-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-354 Improper Validation of Integrity Check Value"
    },
	{
      "description": "The software initializes critical internal variables or data stores using inputs that can be modified by untrusted actors. A software system should be reluctant to trust variables that have been initialized outside of its trust boundary, especially if they are initialized by users. The variables may have been initialized incorrectly. If an attacker can initialize the variable, then they can influence what the vulnerable system will do.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/454.html"
        ]
      },
      "uuid": "1af016c6-387b-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-454 External Initialization of Trusted Variables or Data Stores"
    },
	{
      "description": "The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid. It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption. Data that is untrusted can not be trusted to be well-formed. When developers place no restrictions on gadget chains, or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/502.html"
        ]
      },
      "uuid": "52d3d512-387d-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-502 Deserialization of Untrusted Data"
    },
	{
      "description": "The application can be deployed with active debugging code that can create unintended entry points. A common development practice is to add back door code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the application. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the application.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/489.html"
        ]
      },
      "uuid": "52d3d7e2-387d-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-489 Leftover Debug Code"
    },
	{
      "description": "The requirements for the software dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect. This incorrect implementation may allow authentication to be bypassed.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/303.html"
        ]
      },
      "uuid": "52d3d95e-387d-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-303 Incorrect Implementation of Authentication Algorithm"
    },
	{
      "description": "The software implements an authentication technique, but it skips a step that weakens the technique. Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/304.html"
        ]
      },
      "uuid": "52d3dab2-387d-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-304 Missing Critical Step in Authentication"
    },
	{
      "description": "The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/305.html"
        ]
      },
      "uuid": "52d3dbf2-387d-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-305 Authentication Bypass by Primary Weakness"
    },
	{
      "description": "The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme. While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/308.html"
        ]
      },
      "uuid": "52d3dea4-387d-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-308 Use of Single-factor Authentication"
    },
	{
      "description": "The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/309.html"
        ]
      },
      "uuid": "52d3e02a-387d-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-309 Use of Password System for Primary Authentication"
    },
	{
      "description": "The software does not properly verify that the source of data or communication is valid.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/346.html"
        ]
      },
      "uuid": "52d3e1ba-387d-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-346 Origin Validation Error"
    },
	{
      "description": "Security based on event locations are insecure and can be spoofed. Events are a messaging system which may provide control data to programs listening for events. Events often do not have any type of authentication framework to allow them to be verified from a trusted source. Any application, in Windows, on a given desktop can send a message to any window on the same desktop. There is no authentication framework for these messages. Therefore, any message can be used to manipulate any process on the desktop if the process does not check the validity and safeness of those messages.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/360.html"
        ]
      },
      "uuid": "52d3e304-387d-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-360 Trust of System Event Data"
    },
	{
      "description": "If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/551.html"
        ]
      },
      "uuid": "52d3e444-387d-11ea-8e37-2e728ce88125",
      "value": "OSRS CWE: CWE-551 Incorrect Behavior Order (Authorization Before Parsing and Canonicalization)"
    },
	{
      "description": "The application relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user. Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/565.html"
        ]
      },
      "uuid": "4ae0ef00-387f-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-565 Reliance on Cookies without Validation and Integrity Checking"
    },
	{
      "description": "The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/321.html"
        ]
      },
      "uuid": "4ae0f5fe-387f-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-321 Use of Hard-coded Cryptographic Key"
    },
	{
      "description": "The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts. An authentication mechanism is only as strong as its credentials. For this reason, it is important to require users to have strong passwords. Lack of password complexity significantly reduces the search space when trying to guess user's passwords, making brute-force attacks easier.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/521.html"
        ]
      },
      "uuid": "4ae0f75c-387f-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-521 Weak Password Requirements"
    },
	{
      "description": "The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/306.html"
        ]
      },
      "uuid": "4ae113ae-387f-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-306 Missing Authentication for Critical Function"
    },
	{
      "description": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files. Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/425.html"
        ]
      },
      "uuid": "4ae117e6-387f-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-425 Direct Request (Forced Browsing)"
    },
	{
      "description": "The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/307.html"
        ]
      },
      "uuid": "4ae1193a-387f-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-307 Improper Restriction of Excessive Authentication Attempts"
    },
	{
      "description": "The software uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/419.html"
        ]
      },
      "uuid": "4ae11a66-387f-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-419 Unprotected Primary Channel"
    },
	{
      "description": "The software protects a primary channel, but it does not use the same level of protection for an alternate channel.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/420.html"
        ]
      },
      "uuid": "4ae11b92-387f-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-420 Unprotected Alternate Channel"
    },
	{
      "description": "The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors. This creates a race condition that allows an attacker to access the channel before the authorized user does.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/369.html"
        ]
      },
      "uuid": "4ae11cbe-387f-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-421 Race Condition During Access to Alternate Channel"
    },
	{
      "description": "The software uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum. If integrity check values or checksums are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/353.html"
        ]
      },
      "uuid": "4ae11dea-387f-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-353 Missing Support for Integrity Check"
    },
	{
      "description": "A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/437.html"
        ]
      },
      "uuid": "0f42ae7a-3884-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-437 Incomplete Model of Endpoint Features"
    },
	{
      "description": "The software does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by that algorithm. Cryptographic implementations should follow the algorithms that define them exactly, otherwise encryption can be weaker than expected.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/325.html"
        ]
      },
      "uuid": "0f42b384-3884-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-325 Missing Required Cryptographic Step"
    },
	{
      "description": "The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques. This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/328.html"
        ]
      },
      "uuid": "0f42b50a-3884-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-328 Reversible One-Way Hash"
    },
	{
      "description": "The software performs a key exchange with an actor without verifying the identity of that actor. Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable a set of man-in-the-middle attacks. Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/322.html"
        ]
      },
      "uuid": "0f42b802-3884-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-322 Key Exchange without Entity Authentication"
    },
	{
      "description": "The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key. While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/324.html"
        ]
      },
      "uuid": "0f42b94c-3884-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-324 Use of a Key Past its Expiration Date"
    },
	{
      "description": "The software does not verify, or incorrectly verifies, the cryptographic signature for data.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/347.html"
        ]
      },
      "uuid": "0f42ba82-3884-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-347 Improper Verification of Cryptographic Signature"
    },
	{
      "description": "The software appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/507.html"
        ]
      },
      "uuid": "0f42bbae-3884-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-507 Trojan Horse"
    },
	{
      "description": "Non-replicating malicious code only resides on the target system or software that is attacked; it does not attempt to spread to other systems.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/508.html"
        ]
      },
      "uuid": "0f42bce4-3884-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-508 Non-Replicating Malicious Code"
    },
	{
      "description": "Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or software.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/509.html"
        ]
      },
      "uuid": "0f42c0c2-3884-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-509 Replicating Malicious Code (Virus or Worm)"
    },
	{
      "description": "A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/510.html"
        ]
      },
      "uuid": "0f42c2c0-3884-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-510 Trapdoor"
    },
	{
      "description": "The software contains code that is designed to disrupt the legitimate operation of the software (or its environment) when a certain time passes, or when a certain logical condition is met. When the time bomb or logic bomb is detonated, it may perform a denial of service such as crashing the system, deleting critical data, or degrading system response time. This bomb might be placed within either a replicating or non-replicating Trojan horse.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/511.html"
        ]
      },
      "uuid": "96e99fb8-3885-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-511 Logic and (or) Time Bomb"
    },
	{
      "description": "The software collects personally identifiable information about a human user or the user's activities, but the software accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the software. Spyware is a commonly used term with many definitions and interpretations. In general, it is meant to software that collects information or installs functionality that human users might not allow if they were fully aware of the actions being taken by the software. For example, a user might expect that tax software would collect a social security number and include it when filing a tax return, but that same user would not expect gaming software to obtain the social security number from that tax software's data.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/512.html"
        ]
      },
      "uuid": "96e9a242-3885-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-512 Spyware"
    },
	{
      "description": "Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information. In some instances, knowing when data is transmitted between parties can provide a malicious user with privileged information. Also, externally monitoring the timing of operations can potentially reveal sensitive data. For example, a cryptographic operation can expose its internal state if the time it takes to perform the operation varies, based on the state. Covert channels are frequently classified as either storage or timing channels. Some examples of covert timing channels are the system's paging rate, the time a certain transaction requires to execute, and the time it takes to gain access to a shared bus.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/385.html"
        ]
      },
      "uuid": "96e9a396-3885-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-385 Covert Timing Channel"
    },
	{
      "description": "A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information. Covert storage channels occur when out-of-band data is stored in messages for the purpose of memory reuse. Covert channels are frequently classified as either storage or timing channels. Examples would include using a file intended to hold only audit information to convey user passwords--using the name of a file or perhaps status bits associated with it that can be read by all users to signal the contents of the file. Steganography, concealing information in such a manner that no one but the intended recipient knows of the existence of the message, is a good example of a covert storage channel.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/515.html"
        ]
      },
      "uuid": "96e9a4c2-3885-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-515 Covert Storage Channel"
    },
	{
      "description": "The software uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/331.html"
        ]
      },
      "uuid": "96e9a602-3885-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-331 Insufficient Entropy"
    },
	{
      "description": "The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/334.html"
        ]
      },
      "uuid": "96e9a954-3885-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-334 Small Space of Random Values"
    },
	{
      "description": "The software uses a Pseudo-Random Number Generator (PRNG) that does not correctly manage seeds.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/335.html"
        ]
      },
      "uuid": "96e9aab2-3885-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)"
    },
	{
      "description": "The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong. When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks. Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and (or) do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/338.html"
        ]
      },
      "uuid": "96e9ac6a-3885-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"
    },
	{
      "description": "A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/341.html"
        ]
      },
      "uuid": "96e9adaa-3885-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-341 Predictable from Observable State"
    },
	{
      "description": "An exact value or random number can be precisely predicted by observing previous values.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/342.html"
        ]
      },
      "uuid": "96e9aed6-3885-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-342 Predictable Exact Value from Previous Values"
    },
	{
      "description": "The software's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated. The output of a random number generator should not be predictable based on observations of previous values. In some cases, an attacker cannot predict the exact value that will be produced next, but can narrow down the possibilities significantly. This reduces the amount of effort to perform a brute force attack. For example, suppose the product generates random numbers between 1 and 100, but it always produces a larger value until it reaches 100. If the generator produces an 80, then the attacker knows that the next value will be somewhere between 81 and 100. Instead of 100 possibilities, the attacker only needs to consider 20.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/343.html"
        ]
      },
      "uuid": "54120822-3887-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-343 Predictable Value Range from Previous Values"
    },
	{
      "description": "The product uses a constant value, name, or reference, but this value can (or should) vary across different environments.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/344.html"
        ]
      },
      "uuid": "54120a98-3887-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-344 Use of Invariant Value in Dynamically Changing Context"
    },
	{
      "description": "A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/447.html"
        ]
      },
      "uuid": "54120bec-3887-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-447 Unimplemented or Unsupported Feature in UI"
    },
	{
      "description": "A UI function is obsolete and the product does not warn the user.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/448.html"
        ]
      },
      "uuid": "54120d18-3887-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-448 Obsolete Feature in UI"
    },
	{
      "description": "The UI performs the wrong action with respect to the user's request.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/449.html"
        ]
      },
      "uuid": "54121010-3887-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-449 The UI Performs the Wrong Action"
    },
	{
      "description": "The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/450.html"
        ]
      },
      "uuid": "54121146-3887-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-450 Multiple Interpretations of UI Input"
    },
	{
      "description": "The software's user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system. Software systems should warn users that a potentially dangerous action may occur if the user proceeds. For example, if the user downloads a file from an unknown source and attempts to execute the file on their machine, then the application's GUI can indicate that the file is unsafe.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/356.html"
        ]
      },
      "uuid": "54121272-3887-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-356 Product UI does not Warn User of Unsafe Actions"
    },
	{
      "description": "The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/357.html"
        ]
      },
      "uuid": "5412139e-3887-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-357 Insufficient UI Warning of Dangerous Operations"
    },
	{
      "description": "The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state. When the user interface does not properly reflect what the user asks of it, then it can lead the user into a false sense of security. For example, the user might check a box to enable a security option to enable encrypted communications, but the software does not actually enable the encryption. Alternately, the user might provide a restrict ALL' access control rule, but the software only implements restrict SOME.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/446.html"
        ]
      },
      "uuid": "54121632-3887-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-446 UI Discrepancy for Security Feature"
    },
	{
      "description": "The software has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/348.html"
        ]
      },
      "uuid": "54121768-3887-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-348 Use of Less Trusted Source"
    },
	{
      "description": "The software, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/349.html"
        ]
      },
      "uuid": "37439d8e-388a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-349 Acceptance of Extraneous Untrusted Data With Trusted Data"
    },
	{
      "description": "The software allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/408.html"
        ]
      },
      "uuid": "3743a00e-388a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-408 Incorrect Behavior Order (Early Amplification)"
    },
	{
      "description": "The software does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output. An example of data amplification is a decompression bomb, a small ZIP file that can produce a large amount of data when it is decompressed.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/409.html"
        ]
      },
      "uuid": "3743a16c-388a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-409 Improper Handling of Highly Compressed Data (Data Amplification)"
    },
	{
      "description": "The software's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources. Frequently the consequence is a flood of connection or sessions.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/410.html"
        ]
      },
      "uuid": "3743a4dc-388a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-410 Insufficient Resource Pool"
    },
	{
      "description": "The wrong handler is assigned to process an object. An example of deploying the wrong handler would be calling a servlet to reveal source code of a .JSP file, or automatically determining type of the object even if it is contradictory to an explicitly specified type.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/430.html"
        ]
      },
      "uuid": "3743a630-388a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-430 Deployment of Wrong Handler"
    },
	{
      "description": "Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error. A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/462.html"
        ]
      },
      "uuid": "3743a766-388a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-462 Duplicate Key in Associative List (Alist)"
    },
	{
      "description": "The accidental deletion of a data-structure sentinel can cause serious programming logic problems. Often times data-structure sentinels are used to mark structure of the data structure. A common example of this is the null character at the end of strings. Another common example is linked lists which may contain a sentinel to mark the end of the list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the deletion or modification outside of some wrapper interface which provides safety.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/463.html"
        ]
      },
      "uuid": "3743a89c-388a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-463 Deletion of Data Structure Sentinel"
    },
	{
      "description": "The accidental addition of a data-structure sentinel can cause serious programming logic problems. Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/464.html"
        ]
      },
      "uuid": "3743a9dc-388a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-464 Addition of Data Structure Sentinel"
    },
	{
      "description": "The programmer accidentally uses the wrong operator, which changes the application logic in security-relevant ways. These types of errors are generally the result of a typo.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/480.html"
        ]
      },
      "uuid": "3743ab12-388a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-480 Use of Incorrect Operator"
    },
	{
      "description": "The software does not maintain equal hashcodes for equal objects. Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/581.html"
        ]
      },
      "uuid": "3743ac3e-388a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-581 Object Model Violation (Just One of Equals and Hashcode Defined)"
    },
	{
      "description": "The software does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/358.html"
        ]
      },
      "uuid": "3743ac3e-388a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-358 Improperly Implemented Security Check for Standard"
    },
	{
      "description": "The software sets a pointer to a specific address other than NULL or 0. Using a fixed address is not portable because that address will probably not be valid in all environments or platforms.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 301 thru 600"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/587.html"
        ]
      },
      "uuid": "76a0c4c2-386a-11ea-a137-2e728ce88125",
      "value": "OSRS CWE: CWE-587 Assignment of a Fixed Address to a Pointer"
    }	
	  ],
	"version": 1
}
