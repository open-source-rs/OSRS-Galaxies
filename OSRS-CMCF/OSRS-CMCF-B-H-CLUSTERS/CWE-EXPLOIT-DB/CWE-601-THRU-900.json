{
  "category": "CWE-601-THRU-900",
  "description": "Cluster designed for tagging OSINT artifacts that relate Software Fault Pattern (SFP) Clusters CWE 601 thru 900.  All cluster items are of base taxonomy and do no include children or variants of the base CWE.",
  "name": "OSRS CWE SFP CWE 601 thru 900",
  "source": "CWE Software Fault Pattern (SFP) Clusters",
  "type": "OSRS-CMCF-BLOCK-OSRS",
  "uuid": "feda733c-2817-11ea-978f-2e728ce88125",
  "values": [
	{
      "description": "The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses. There are multiple ways in which this weakness can be introduced, including the wrong variable or reference, an incorrect number of arguments, incorrect order of arguments, wrong type of arguments, or wrong value.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/628.html"
        ]
      },
      "uuid": "e166448e-29b6-11ea-978f-2e728ce88125",
      "value": "OSRS CWE: CWE-628 Function Call with Incorrectly Specified Arguments"
    },
	{
      "description": "The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. While assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service. For example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/617.html"
        ]
      },
      "uuid": "ac83c3d2-3c57-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-617 Reachable Assertion"
    },
	{
      "description": "The program invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/676.html"
        ]
      },
      "uuid": "ac83c648-3c57-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-676 Use of Potentially Dangerous Function"
    },
	{
      "description": "The software uses low-level functionality that is explicitly prohibited by the framework or specification under which the software is supposed to operate. The use of low-level functionality can violate the specification in unexpected ways that effectively disable built-in protection mechanisms, introduce exploitable inconsistencies, or otherwise expose the functionality to attack.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/695.html"
        ]
      },
      "uuid": "ac83c7b0-3c57-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-695 Use of Low-Level Functionality"
    },
	{
      "description": "The application attempts to return a memory resource to the system, but calls the wrong release function or calls the appropriate release function incorrectly. This weakness can take several forms, such as - The memory was allocated, explicitly or implicitly, via one memory management method and deallocated using a different, non-compatible function (CWE-762). The function calls or memory management routines chosen are appropriate, however they are used incorrectly, such as in CWE-761.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/763.html"
        ]
      },
      "uuid": "ac83c8fa-3c57-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-763 Release of Invalid Pointer or Reference"
    },
	{
      "description": "The software does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed. This does not necessarily apply in languages or frameworks that automatically perform garbage collection, since the removal of all references may act as a signal that the resource is ready to be reclaimed.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/771.html"
        ]
      },
      "uuid": "ac83ca3a-3c57-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-771 Missing Reference to Active Allocated Resource"
    },
	{
      "description": "The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed. When a resource is not released after use, it can allow attackers to cause a denial of service by causing the allocation of resources without triggering their release. Frequently-affected resources include memory, CPU, disk space, power or battery, etc.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/772.html"
        ]
      },
      "uuid": "ac83cb7a-3c57-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-772 Missing Release of Resource after Effective Lifetime"
    },
	{
      "description": "The software uses multiple resources that can have the same identifier, in a context in which unique identifiers are required. If the software assumes that each resource has a unique identifier, the software could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/694.html"
        ]
      },
      "uuid": "ac83ce9a-3c57-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-694 Use of Multiple Resources with Duplicate Identifier"
    },
	{
      "description": "The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/628.html"
        ]
      },
      "uuid": "ac83cfee-3c57-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-770 Allocation of Resources Without Limits or Throttling"
    },
	{
      "description": "The program uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient. Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/609.html"
        ]
      },
      "uuid": "ac83d1c4-3c57-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-609 Double-Checked Locking"
    },
	{
      "description": "The software calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/663.html"
        ]
      },
      "uuid": "ac83d322-3c57-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-663 Use of a Non-reentrant Function in a Concurrent Context"
    },
	{
      "description": "The software does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors. Locking is a type of synchronization behavior that ensures that multiple independently-operating processes or threads do not interfere with each other when accessing the same resource. All processes and (or) threads are expected to follow the same steps for locking. If these steps are not followed precisely - or if no locking is done at all - then another process and (or) thread could modify the shared resource in a way that is not visible or predictable to the original process. This can lead to data or memory corruption, denial of service, etc.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/667.html"
        ]
      },
      "uuid": "119343ae-3c5a-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-667 Improper Locking"
    },
	{
      "description": "The software unlocks a critical resource more times than intended, leading to an unexpected state in the system. When software is operating in a concurrent environment and repeatedly unlocks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra calls to unlock will increase the count for the number of available resources, likely resulting in a crash or unpredictable behavior when the system nears capacity.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/765.html"
        ]
      },
      "uuid": "11934692-3c5a-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-765 Multiple Unlocks of a Critical Resource"
    },
	{
      "description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks. An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/601.html"
        ]
      },
      "uuid": "119348f4-3c5a-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-601 URL Redirection to Untrusted Site (Open Redirect)"
    },
	{
      "description": "The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output. XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing. By submitting an XML file that defines an external entity with a file URI, an attacker can cause the processing application to read the contents of a local file.  Using URIs with other schemes such as http, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning. Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/611.html"
        ]
      },
      "uuid": "11934b10-3c5a-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-611 Improper Restriction of XML External Entity Reference"
    },
	{
      "description": "If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor dangling. For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor's role, but SQL injection attacks are commonly possible.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/619.html"
        ]
      },
      "uuid": "11934cdc-3c5a-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-619 Dangling Database Cursor (Cursor Injection)"
    },
	{
      "description": "The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables. For example, in PHP, extraction can be used to provide functionality similar to register_globals, a dangerous functionality that is frequently disabled in production systems. Calling extract() or import_request_variables() without the proper arguments could allow arbitrary global variables to be overwritten, including superglobals. Similar functionality is possible in other interpreted languages, including custom languages.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/621.html"
        ]
      },
      "uuid": "11934ee4-3c5a-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-621 Variable Extraction Error"
    },
	{
      "description": "The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers. Case (2) is possible in the PHP preg_replace() function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/624.html"
        ]
      },
      "uuid": "119350ba-3c5a-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-624 Executable Regular Expression Error"
    },
	{
      "description": "The product uses a regular expression that does not sufficiently restrict the set of allowed values. This effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include - not identifying the beginning and end of the target string, using wildcards instead of acceptable character ranges, or others.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/625.html"
        ]
      },
      "uuid": "11935290-3c5a-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-625 Permissive Regular Expression"
    },
	{
      "description": "In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions. The resultant vulnerabilities depend on the behavior of the application, both at the crossover point and in any control/data flow that is reachable by the related variables or functions.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/627.html"
        ]
      },
      "uuid": "11935506-3c5a-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-627 Dynamic Variable Evaluation"
    },
	{
      "description": "The application constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name. This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/641.html"
        ]
      },
      "uuid": "1193574a-3c5a-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-641 Improper Restriction of Names for Files and Other Resources"
    },
	{
      "description": "The software uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query. The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/643.html"
        ]
      },
      "uuid": "7a9af2d4-3c5f-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-643 Improper Neutralization of Data within XPath Expressions (XPath Injection)"
    },
	{
      "description": "The software uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query. The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/652.html"
        ]
      },
      "uuid": "7a9af5ae-3c5f-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-652 Improper Neutralization of Data within XQuery Expressions (XQuery Injection)"
    },
	{
      "description": "The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service because of excessive looping.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/606.html"
        ]
      },
      "uuid": "7a9af6f8-3c5f-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-606 Unchecked Input for Loop Condition"
    },
	{
      "description": "A client and (or) server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check. Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/603.html"
        ]
      },
      "uuid": "7a9af82e-3c5f-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-603 Use of Client-Side Authentication"
    },
	{
      "description": "According to WASC, Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/613.html"
        ]
      },
      "uuid": "7a9af964-3c5f-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-613 Insufficient Session Expiration"
    },
	{
      "description": "The software contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out. Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/645.html"
        ]
      },
      "uuid": "7a9afa9a-3c5f-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-645 Overly Restrictive Account Lockout Mechanism"
    },
	{
      "description": "When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed. On most systems, a combination of setting the SO_REUSEADDR socket option, and a call to bind() allows any process to bind to a port to which a previous process has bound with INADDR_ANY. This allows a user to bind to the specific address of a server bound to INADDR_ANY on an unprivileged port, and steal its UDP packets and (or) TCP connection.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/605.html"
        ]
      },
      "uuid": "7a9afebe-3c5f-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-605 Multiple Binds to the Same Port"
    },
	{
      "description": "The software assigns an owner to a resource, but the owner is outside of the intended control sphere. This may allow the resource to be manipulated by actors outside of the intended control sphere.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/708.html"
        ]
      },
      "uuid": "7a9b0030-3c5f-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-708 Incorrect Ownership Assignment"
    },
	{
      "description": "The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data. Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system. For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value. One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read and (or) modify their data.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/639.html"
        ]
      },
      "uuid": "7a9b0166-3c5f-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-639 Authorization Bypass Through User-Controlled Key"
    },
	{
      "description": "The product does not sufficiently compartmentalize functionality or processes that require different privilege levels, rights, or permissions. When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/653.html"
        ]
      },
      "uuid": "7a9b0292-3c5f-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-653 Insufficient Compartmentalization"
    },
	{
      "description": "A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties. When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the software by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/757.html"
        ]
      },
      "uuid": "45eddbda-3c61-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-757 Selection of Less-Secure Algorithm During Negotiation (Algorithm Downgrade)"
    },
	{
      "description": "The software contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak. It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme. This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/640.html"
        ]
      },
      "uuid": "45edde50-3c61-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-640 Weak Password Recovery Mechanism for Forgotten Password"
    },
	{
      "description": "The software has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/655.html"
        ]
      },
      "uuid": "45ede102-3c61-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-655 Insufficient Psychological Acceptability"
    },
	{
      "description": "The software is composed of a server that relies on the client to implement a mechanism that is intended to protect the server. When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/602.html"
        ]
      },
      "uuid": "45ede27e-3c61-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-602 Client-Side Enforcement of Server-Side Security"
    },
	{
      "description": "The software uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the software does not use integrity checks to detect if those inputs have been modified. When an application relies on obfuscation or incorrectly applied and (or) weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens and (or) parameters for integrity, the application is vulnerable to an attack where an adversary blindly traverses the space of possible values of the said token and (or) parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens and (or) parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/649.html"
        ]
      },
      "uuid": "45ede4ae-3c61-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-649 Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking"
    },
	{
      "description": "A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/654.html"
        ]
      },
      "uuid": "45ede602-3c61-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-654 Reliance on a Single Factor in a Security Decision"
    },
	{
      "description": "The software uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism. This reliance on security through obscurity can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/656.html"
        ]
      },
      "uuid": "45ede83c-3c61-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-656 Reliance on Security Through Obscurity"
    },
	{
      "description": "The software provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted. This weakness can lead to a wide variety of resultant weaknesses, depending on the behavior of the exposed method. It can apply to any number of technologies and approaches, such as ActiveX controls, Java functions, IOCTLs, and so on. The exposure can occur in a few different ways - (1) The function and (or) method was never intended to be exposed to outside actors. (2) The function and (or) method was only intended to be accessible to a limited set of actors, such as Internet-based access from a single web site.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/749.html"
        ]
      },
      "uuid": "45ede986-3c61-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-749 Exposed Dangerous Method or Function"
    },
	{
      "description": "The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/733.html"
        ]
      },
      "uuid": "45edeb7a-3c61-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-733 Compiler Optimization Removal or Modification of Security-critical Code"
    },
	{
      "description": "An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain). ActiveX controls can exercise far greater control over the operating system than typical Java or javascript. Exposed methods can be subject to various vulnerabilities, depending on the implemented behaviors of those methods, and whether input validation is performed on the provided arguments. If there is no integrity checking or origin validation, this method could be invoked by attackers.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/618.html"
        ]
      },
      "uuid": "45edecce-3c61-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-618 Exposed Unsafe ActiveX Method"
    },
	{
      "description": "The application does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly. When an application contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to - ensure that assumptions made by the APIs are valid, such as validity of arguments, account for known weaknesses in the design and (or) implementation of the API, call the API from a safe context. If the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data. For instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/648.html"
        ]
      },
      "uuid": "4aff9a4e-3c63-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-648 Incorrect Use of Privileged APIs"
    },
	{
      "description": "The web application sends a redirect to another location, but instead of exiting, it executes additional code.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/698.html"
        ]
      },
      "uuid": "4aff9cba-3c63-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-698 Execution After Redirect (EAR)"
    },
	{
      "description": "When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.",
      "meta": {
	  "kill_chain": [
          "cwe-exploit-db:CWE 601 thru 900"
        ],
        "refs": [
          "https://cwe.mitre.org/data/definitions/888.html",
          "https://en.wikipedia.org/wiki/Common_Weakness_Enumeration",
          "https://cwe.mitre.org/data/definitions/681.html"
        ]
      },
      "uuid": "8484dede-3c57-11ea-b77f-2e728ce88125",
      "value": "OSRS CWE: CWE-681 Incorrect Conversion between Numeric Types"
    }
	  ],
	"version": 1
}
