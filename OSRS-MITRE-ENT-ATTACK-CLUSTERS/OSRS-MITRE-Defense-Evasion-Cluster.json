{
  "category": "OSRS-MITRE-Defense-Evasion",
  "description": "Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling disabling security software or obfuscating encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",
  "name": "OSRS-MITRE-Defense-Evasion",
  "source": "MITRE ATT&CK",
  "type": "OSRS-MITRE-Defense-Evasion",
  "uuid": "599dbeb0-fa3b-11e9-8f0b-362b9e155667",
  "values": [
	  {
      "description": "Test place holder",
      "meta": {
        "refs": [
          "https://attack.mitre.org/tactics/TA0005/"
        ]
      },
      "uuid": "574c96de-fa42-11e9-8f0b-362b9e155667",
      "value": "Test OSRS-MITRE-Defense-Evasion Value"
    },
	{
      "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1527"
        ]
      },
      "uuid": "15e64f48-fb12-11e9-8f0b-362b9e155667",
      "value": "Application Access Token T1527"
    },
	{
      "description": "Adversaries can use binary padding to add junk data and change the on-disk representation of malware without affecting the functionality or behavior of the binary. This will often increase the size of the binary beyond what some security tools are capable of handling due to file size limitations.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1009"
        ]
      },
      "uuid": "15e6545c-fb12-11e9-8f0b-362b9e155667",
      "value": "Binary Padding T1009"
    },
	{
      "description": "Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1197"
        ]
      },
      "uuid": "15e655ce-fb12-11e9-8f0b-362b9e155667",
      "value": "BITS Jobs T1197"
    },
	{
      "description": "Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1088"
        ]
      },
      "uuid": "15e65812-fb12-11e9-8f0b-362b9e155667",
      "value": "Bypass User Account Control T1088"
    },
	{
      "description": "macOS and Linux both keep track of the commands users type in their terminal so that users can easily remember what they've done. These logs can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called .bash_history. The benefit of this is that it allows users to go back to commands they've used before in different sessions. Since everything typed on the command-line is saved, passwords passed in on the command line are also saved. Adversaries can abuse this by searching these files for cleartext passwords. Additionally, adversaries can use a variety of methods to prevent their own commands from appear in these logs such as unset HISTFILE, export HISTFILESIZE 0, history -c, rm .bash_history.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1146"
        ]
      },
      "uuid": "15e65952-fb12-11e9-8f0b-362b9e155667",
      "value": "Clear Command History T1146"
    },
	{
      "description": "The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1191"
        ]
      },
      "uuid": "15e65a74-fb12-11e9-8f0b-362b9e155667",
      "value": "CMSTP T1191"
    },
	{
      "description": "Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. However, adversaries are known to use code signing certificates to masquerade malware and tools as legitimate binaries . The certificates used during an operation may be created, forged, or stolen by the adversary.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1116"
        ]
      },
      "uuid": "15e65ba0-fb12-11e9-8f0b-362b9e155667",
      "value": "Code Signing T1116"
    },
	{
      "description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Similar to Obfuscated Files or Information, text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC MinGW.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1500"
        ]
      },
      "uuid": "15e65ed4-fb12-11e9-8f0b-362b9e155667",
      "value": "Compile After Delivery T1500"
    },
	{
      "description": "Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. CHM content is displayed using underlying components of the Internet Explorer browser loaded by the HTML Help executable program (hh.exe).",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1223"
        ]
      },
      "uuid": "15e660d2-fb12-11e9-8f0b-362b9e155667",
      "value": "Compiled HTML File T1223"
    },
	{
      "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1109"
        ]
      },
      "uuid": "e74d1634-fb12-11e9-8f0b-362b9e155667",
      "value": "Component Firmware T1109"
    },
	{
      "description": "The Component Object Model (COM) is a system within Windows to enable interaction between software components through the operating system. Adversaries can use this system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Windows Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1122"
        ]
      },
      "uuid": "e74d188c-fb12-11e9-8f0b-362b9e155667",
      "value": "Component Object Model Hijacking T1122"
    },
	{
      "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap. Adversaries use these types of proxies to manage command and control communications, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1090"
        ]
      },
      "uuid": "e74d19d6-fb12-11e9-8f0b-362b9e155667",
      "value": "Connection Proxy T1090"
    },
	{
      "description": "Windows Control Panel items are utilities that allow users to view and adjust computer settings. Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a CPlApplet function. Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1196"
        ]
      },
      "uuid": "e74d1b02-fb12-11e9-8f0b-362b9e155667",
      "value": "Control Panel Items T1196"
    },
	{
      "description": "DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a Domain Controller (DC). Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1207"
        ]
      },
      "uuid": "e74d1c9c-fb12-11e9-8f0b-362b9e155667",
      "value": "DCShadow T1207"
    },
	{
      "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware, Scripting, PowerShell, or by using utilities present on the system.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1140"
        ]
      },
      "uuid": "e74d1e04-fb12-11e9-8f0b-362b9e155667",
      "value": "Deobfuscate OR Decode Files or Information T1140"
    },
	{
      "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1089"
        ]
      },
      "uuid": "e74d216a-fb12-11e9-8f0b-362b9e155667",
      "value": "Disabling Security Tools T1089"
    },
	{
      "description": "Windows systems use a common method to look for required DLLs to load into a program. Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1038"
        ]
      },
      "uuid": "e74d22aa-fb12-11e9-8f0b-362b9e155667",
      "value": "DLL Search Order Hijacking T1038"
    },
	{
      "description": "Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable to side-loading to load a malicious DLL.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1073"
        ]
      },
      "uuid": "e74d23e0-fb12-11e9-8f0b-362b9e155667",
      "value": "DLL Side-Loading T1073"
    },
	{
      "description": "Execution guardrails constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1480"
        ]
      },
      "uuid": "e74d24f8-fb12-11e9-8f0b-362b9e155667",
      "value": "Execution Guardrails T1480"
    },
	{
      "description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1211"
        ]
      },
      "uuid": "abd514c0-fb13-11e9-8f0b-362b9e155667",
      "value": "Exploitation for Defense Evasion T1211"
    },
	{
      "description": "Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). Registration of new windows classes can include a request for up to 40 bytes of extra window memory (EWM) to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1181"
        ]
      },
      "uuid": "abd51736-fb13-11e9-8f0b-362b9e155667",
      "value": "Extra Window Memory Injection T1181"
    },
	{
      "description": "File and directory permissions are commonly managed by discretionary access control lists (DACLs) specified by the file or directory owner. File and directory DACL implementations may vary by platform, but generally explicitly designate which users/groups can perform which actions (ex: read, write, execute, etc.).",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1222"
        ]
      },
      "uuid": "abd51aa6-fb13-11e9-8f0b-362b9e155667",
      "value": "File and Directory Permissions Modification T1222"
    },
	{
      "description": "Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1107"
        ]
      },
      "uuid": "abd51c0e-fb13-11e9-8f0b-362b9e155667",
      "value": "File Deletion T1107"
    },
	{
      "description": "Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1006"
        ]
      },
      "uuid": "abd51d3a-fb13-11e9-8f0b-362b9e155667",
      "value": "File System Logical Offsets T1006"
    },
	{
      "description": "In macOS and OS X, when applications or programs are downloaded from the internet, there is a special attribute set on the file called com.apple.quarantine. This attribute is read by Apple's Gatekeeper defense program at execution time and provides a prompt to the user to allow or deny execution.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1144"
        ]
      },
      "uuid": "abd51e5c-fb13-11e9-8f0b-362b9e155667",
      "value": "Gatekeeper Bypass T1144"
    },
	{
      "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1484"
        ]
      },
      "uuid": "abd51f88-fb13-11e9-8f0b-362b9e155667",
      "value": "Group Policy Modification T1484"
    },
	{
      "description": "To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a hidden file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir a for Windows and ls –a for Linux and macOS).",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1158"
        ]
      },
      "uuid": "abd520a0-fb13-11e9-8f0b-362b9e155667",
      "value": "Hidden Files and Directories T1158"
    },
	{
      "description": "Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account. There is a property value in Library Preferences com.apple.loginwindow called Hide500Users that prevents users with userIDs 500 and lower from appearing at the login screen. By using the Create Account technique with a userID under 500 and enabling this property (setting it to Yes), an adversary can hide their user accounts much more easily - sudo dscl . -create  Users username UniqueID 401.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1147"
        ]
      },
      "uuid": "abd521cc-fb13-11e9-8f0b-362b9e155667",
      "value": "Hidden Users T1147"
    },
	{
      "description": "Adversaries may implement hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. Adversaries may abuse operating system functionality to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1143"
        ]
      },
      "uuid": "abd52686-fb13-11e9-8f0b-362b9e155667",
      "value": "Hidden Window T1143"
    },
	{
      "description": "The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the .bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to ignorespace. HISTCONTROL can also be set to ignore duplicate commands by setting it to ignoredups. In some Linux systems, this is set by default to ignoreboth which covers both of the previous examples. This means that ls will not be saved, but ls would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/tactics/TA0005/"
        ]
      },
      "uuid": "65059938-fb14-11e9-aad5-362b9e155667",
      "value": "HISTCONTROL T1148"
    },
	{
      "description": "Image File Execution Options (IFEO) enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., C: dbg ntsd.exe -g notepad.exe).",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1183"
        ]
      },
      "uuid": "65059b86-fb14-11e9-aad5-362b9e155667",
      "value": "Image File Execution Options Injection T1183"
    },
	{
      "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as PowerShell or Windows Management Instrumentation.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1054"
        ]
      },
      "uuid": "65059fbe-fb14-11e9-aad5-362b9e155667",
      "value": "Indicator Blocking T1054"
    },
	{
      "description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1066"
        ]
      },
      "uuid": "6505a14e-fb14-11e9-aad5-362b9e155667",
      "value": "Indicator Removal from Tools T1066"
    },
	{
      "description": "Adversaries may delete or alter generated artifacts on a host system, including logs and potentially captured files such as quarantined malware. Locations and format of logs will vary, but typical organic system logs are captured as Windows events or Linux macOS files such as Bash History and var log.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1070"
        ]
      },
      "uuid": "6505a27a-fb14-11e9-aad5-362b9e155667",
      "value": "Indicator Removal on Host T1070"
    },
	{
      "description": "Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a Command-Line Interface, Run window, or via scripts.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1202"
        ]
      },
      "uuid": "6505a39c-fb14-11e9-aad5-362b9e155667",
      "value": "Indirect Command Execution T1202"
    },
	{
      "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1130"
        ]
      },
      "uuid": "6505a4be-fb14-11e9-aad5-362b9e155667",
      "value": "Install Root Certificate T1130"
    },
	{
      "description": "InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. InstallUtil.exe is digitally signed by Microsoft.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1118"
        ]
      },
      "uuid": "6505a5ea-fb14-11e9-aad5-362b9e155667",
      "value": "InstallUtil T1118"
    },
	{
      "description": "Launchctl controls the macOS launchd process which handles things like launch agents and launch daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input. By loading or reloading launch agents or launch daemons, adversaries can install persistence or execute changes they made . Loading, unloading, or reloading launch agents or launch daemons can require elevated privileges.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1152"
        ]
      },
      "uuid": "6505a702-fb14-11e9-aad5-362b9e155667",
      "value": "Launchctl T1152"
    },
	{
      "description": "As of OS X 10.8, mach-O binaries introduced a new header called LC_MAIN that points to the binary’s entry point for execution. Previously, there were two headers to achieve this same effect: LC_THREAD and LC_UNIXTHREAD . The entry point for a binary can be hijacked so that initial execution flows to a malicious addition (either another section or a code cave) and then goes back to the initial entry point so that the victim doesn’t know anything was different . By modifying a binary in this way, application whitelisting can be bypassed because the file name or application path is still the same.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1149"
        ]
      },
      "uuid": "6505a9d2-fb14-11e9-aad5-362b9e155667",
      "value": "LC_MAIN Hijacking T1149"
    },
	{
      "description": "Masquerading occurs when the name or location of an executable, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. Several different variations of this technique have been observed.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1036"
        ]
      },
      "uuid": "371b4292-fb15-11e9-8f0b-362b9e155667",
      "value": "Masquerading T1036"
    },
	{
      "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in Persistence and Execution.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1112"
        ]
      },
      "uuid": "371b4788-fb15-11e9-8f0b-362b9e155667",
      "value": "Modify Registry T1112"
    },
	{
      "description": "Mshta.exe is a utility that executes Microsoft HTML Applications (HTA). HTA files have the file extension .hta. HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1170"
        ]
      },
      "uuid": "371b4904-fb15-11e9-8f0b-362b9e155667",
      "value": "Mshta T1170"
    },
	{
      "description": "Windows shared drive and Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the net use system share delete command.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1126"
        ]
      },
      "uuid": "371b4a3a-fb15-11e9-8f0b-362b9e155667",
      "value": "Network Share Connection Removal T1126"
    },
	{
      "description": "Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file directory on the partition. Within MFT entries are file attributes, such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1096"
        ]
      },
      "uuid": "371b4b70-fb15-11e9-8f0b-362b9e155667",
      "value": "NTFS File Attributes T1096"
    },
	{
      "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.",
      "meta": {
        "refs": [
		  "https://attack.mitre.org/techniques/T1027"
        ]
      },
      "uuid": "371b4c92-fb15-11e9-8f0b-362b9e155667",
      "value": "Obfuscated Files or Information T1027"
    },
	{
      "description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use. This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via svchost.exe or consent.exe) rather than the current user context.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1502"
        ]
      },
      "uuid": "371b4dbe-fb15-11e9-8f0b-362b9e155667",
      "value": "Parent PID Spoofing T1502"
    },
	{
      "description": "Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1150"
        ]
      },
      "uuid": "371b5192-fb15-11e9-8f0b-362b9e155667",
      "value": "Plist Modification T1150"
    },
	{
      "description": "Port Knocking is a well-established method used by both defenders and adversaries to hide open ports from access. To enable a port, an adversary sends a series of packets with certain characteristics before the port will be opened. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports, but can involve unusual flags, specific strings or other unique characteristics. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1205"
        ]
      },
      "uuid": "371b52dc-fb15-11e9-8f0b-362b9e155667",
      "value": "Port Knocking T1205"
    },
	{
      "description": "Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1186"
        ]
      },
      "uuid": "371b53fe-fb15-11e9-8f0b-362b9e155667",
      "value": "Process Doppelganging T1186"
    },
	{
      "description": "Process hollowing occurs when a process is created in a suspended state then its memory is unmapped and replaced with malicious code. Similar to Process Injection, execution of the malicious code is masked under a legitimate process and may evade defenses and detection analysis.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1093"
        ]
      },
      "uuid": "03b3b320-fb16-11e9-8f0b-362b9e155667",
      "value": "Process Hollowing T1093"
    },
	{
      "description": "Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1055"
        ]
      },
      "uuid": "03b3b582-fb16-11e9-8f0b-362b9e155667",
      "value": "Process Injection T1055"
    },
	{
      "description": "Adversaries may use more than one remote access tool with varying command and control protocols or credentialed access to remote services so they can maintain access if an access mechanism is detected or mitigated.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1108"
        ]
      },
      "uuid": "03b3b6cc-fb16-11e9-8f0b-362b9e155667",
      "value": "Redundant Access T1088"
    },
	{
      "description": "Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are digitally signed by Microsoft.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1121"
        ]
      },
      "uuid": "03b3b802-fb16-11e9-8f0b-362b9e155667",
      "value": "Regsvcs OR Regasm T1121"
    },
	{
      "description": "Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe can be used to execute arbitrary binaries.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1117"
        ]
      },
      "uuid": "03b3b92e-fb16-11e9-8f0b-362b9e155667",
      "value": "Regsvr32 T1117"
    },
	{
      "description": "An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be easily facilitated using restoration from VM or data storage snapshots through the cloud management dashboard. Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and or ephemeral, with the latter types often reset upon stop or restart of the VM.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1536"
        ]
      },
      "uuid": "03b3bc80-fb16-11e9-8f0b-362b9e155667",
      "value": "Revert Cloud Instance T1536"
    },
	{
      "description": "Rootkits are programs that hide the existence of malware by intercepting (i.e., Hooking) and modifying operating system API calls that supply system information. Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a Hypervisor, Master Boot Record, or the System Firmware.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1014"
        ]
      },
      "uuid": "03b3bdf2-fb16-11e9-8f0b-362b9e155667",
      "value": "Rootkit T1014"
    },
	{
      "description": "The rundll32.exe program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process because of whitelists or false positives from Windows using rundll32.exe for normal operations.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1085"
        ]
      },
      "uuid": "03b3bf1e-fb16-11e9-8f0b-362b9e155667",
      "value": "Rundll32 T1085"
    },
	{
      "description": "Adversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1064"
        ]
      },
      "uuid": "03b3c04a-fb16-11e9-8f0b-362b9e155667",
      "value": "Scripting T1064"
    },
	{
      "description": "Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application whitelisting and signature validation on systems. This technique accounts for proxy execution methods that are not already accounted for within the existing techniques.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1218"
        ]
      },
      "uuid": "03b3c16c-fb16-11e9-8f0b-362b9e155667",
      "value": "Signed Binary Proxy Execution T1218"
    },
	{
      "description": "Scripts signed with trusted certificates can be used to proxy execution of malicious files. This behavior may bypass signature validation restrictions and application whitelisting solutions that do not account for use of these scripts.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1216"
        ]
      },
      "uuid": "f3150b94-fb16-11e9-8f0b-362b9e155667",
      "value": "Signed Script Proxy Execution T1216"
    },
	{
      "description": "In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex - a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function, which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1198"
        ]
      },
      "uuid": "f3150de2-fb16-11e9-8f0b-362b9e155667",
      "value": "SIP and Trust Provider Hijacking T1198"
    },
	{
      "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1045"
        ]
      },
      "uuid": "f3150f36-fb16-11e9-8f0b-362b9e155667",
      "value": "Software Packing T1045"
    },
	{
      "description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system. For example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to evil.txt (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1151"
        ]
      },
      "uuid": "f3151328-fb16-11e9-8f0b-362b9e155667",
      "value": "Space after Filename T1151"
    },
	{
      "description": "Microsoft’s Open Office XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1221"
        ]
      },
      "uuid": "f31514a4-fb16-11e9-8f0b-362b9e155667",
      "value": "Template Injection T1221"
    },
	{
      "description": "Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools. Timestomping may be used along with file name Masquerading to hide malware and tools.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1099"
        ]
      },
      "uuid": "3dff62ee-fb17-11e9-8f0b-362b9e155667",
      "value": "Timestomp T1099"
    },
	{
      "description": "There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application whitelisting defensive solutions.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1127"
        ]
      },
      "uuid": "3dff662c-fb17-11e9-8f0b-362b9e155667",
      "value": "Trusted Developer Utilities T1127"
    },
	{
      "description": "Adversaries may steal the credentials of a specific user or service account using Credential Access techniques or capture credentials earlier in their reconnaissance process through social engineering for means of gaining Initial Access.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1078"
        ]
      },
      "uuid": "3dff678a-fb17-11e9-8f0b-362b9e155667",
      "value": "Valid Accounts T1078"
    },
	{
      "description": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1535"
        ]
      },
      "uuid": "3dff69f6-fb17-11e9-8f0b-362b9e155667",
      "value": "Unused OR Unsupported Cloud Regions T1535"
    },
	{
      "description": "Adversaries may check for the presence of a virtual machine environment (VME) or sandbox to avoid potential detection of tools and activities. If the adversary detects a VME, they may alter their malware to conceal the core functions of the implant or disengage from the victim. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information from learned from Virtualization or Sandbox Evasion during automated discovery to shape follow-on behaviors.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1497"
        ]
      },
      "uuid": "3dff6b36-fb17-11e9-8f0b-362b9e155667",
      "value": "Virtualization OR Sandbox Evasion T1497"
    },
	{
      "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying commands to a compromised system.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1102"
        ]
      },
      "uuid": "ccf55080-fb17-11e9-8f0b-362b9e155667",
      "value": "Web Service T1102"
    },
	{
      "description": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1506"
        ]
      },
      "uuid": "ccf552ec-fb17-11e9-8f0b-362b9e155667",
      "value": "Web Session Cookie T1506"
    },
	{
      "description": "Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1220"
        ]
      },
      "uuid": "ccf55436-fb17-11e9-8f0b-362b9e155667",
      "value": "XSL Script Processing T1220"
    },
	{
      "description": "Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token. For example, Microsoft promotes the use of access tokens as a security best practice. Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command runas.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1134"
        ]
      },
      "uuid": "15e66320-fb12-11e9-8f0b-362b9e155667",
      "value": "Access Token Manipulation T1134"
    }
	  ],
	"version": 3
}
