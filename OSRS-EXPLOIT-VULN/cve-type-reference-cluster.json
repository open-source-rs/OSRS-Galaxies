{
  "category": "OSRS-CVE-Type",
  "description": "This galaxy is for the indexing of botnets.",
  "name": "OSRS-CVE-Type",
  "source": "Open Sources",
  "type": "OSRS-CVE-Type",
  "uuid": "a8e14a9a-b531-11e9-a2a3-2a2ae2dbcce4",
  "values": [
	{
      "description": "Test place holder",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "438240b8-b532-11e9-a2a3-2a2ae2dbcce4",
      "value": "Test-CVE-Value"
    },
	{
      "description": "An attempt to cause system error by exceding memory allocated to integers.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "b10b4e72-b532-11e9-a2a3-2a2ae2dbcce4",
      "value": "Integer Overflow"
    },
	{
      "description": "An attempt to remotely access sensitive information on the target system.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "b10b50d4-b532-11e9-a2a3-2a2ae2dbcce4",
      "value": "Remote Information Disclosure"
    },
	{
      "description": "HTML injection is a type of injection issue that occurs when a user is able to control an input point and is able to inject arbitrary HTML code into a vulnerable web page.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures",
		  "https://www.owasp.org/index.php/Testing_for_HTML_Injection_(OTG-CLIENT-003)"
        ]
      },
      "uuid": "b10b5232-b532-11e9-a2a3-2a2ae2dbcce4",
      "value": "HTML Injection"
    },
	{
      "description": "An attempt to escalate privileges on the local system or application.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "b10b53cc-b532-11e9-a2a3-2a2ae2dbcce4",
      "value": "Local Privilege Escalation"
    },
	{
      "description": "Attempt to remotely cause a buffer to excede its memory allocation in order to cause the system or application to malfunction.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "b10b5516-b532-11e9-a2a3-2a2ae2dbcce4",
      "value": "Remote Buffer Overflow"
    },
	{
      "description": "The software reads data past the end, or before the beginning, of the intended buffer. Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures",
		  "https://cwe.mitre.org/data/definitions/125.html"
        ]
      },
      "uuid": "6e13661c-b533-11e9-a2a3-2a2ae2dbcce4",
      "value": "Out of Bounds Read"
    },
	{
      "description": "An out of bounds read with the intent to cause a denial of service event.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "6e136888-b533-11e9-a2a3-2a2ae2dbcce4",
      "value": "Out of Bounds Read Denial of Service"
    },
	{
      "description": "A vulnerability that allows for the execution of code over a network.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures",
		  "https://en.wikipedia.org/wiki/Arbitrary_code_execution"
        ]
      },
      "uuid": "6e1369e6-b533-11e9-a2a3-2a2ae2dbcce4",
      "value": "Remote Code Execution"
    },
	{
      "description": "Vulnerability that allows for unauthorized access to system(s), applications(s), or system resource(s)",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "6e136b8a-b533-11e9-a2a3-2a2ae2dbcce4",
      "value": "Unauthorized Access"
    },
	{
      "description": "A vulnerability that allows access to sensitive information.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "6e136d06-b533-11e9-a2a3-2a2ae2dbcce4",
      "value": "Information Disclosure"
    },
	{
      "description": "A vulnerability in memory that allows for the misuse of integer space allocation.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "df26fdb8-b534-11e9-a2a3-2a2ae2dbcce4",
      "value": "Integer Underflow"
    },
	{
      "description": "Vulnerability that allows for the injection of SQL commands.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "df27001a-b534-11e9-a2a3-2a2ae2dbcce4",
      "value": "SQL Injection"
    },
	{
      "description": "The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures",
		  "https://cwe.mitre.org/data/definitions/20.html"
        ]
      },
      "uuid": "df27016e-b534-11e9-a2a3-2a2ae2dbcce4",
      "value": "Improper Form Validation"
    },
	{
      "description": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold or when a program attempts to put data in a memory area past a buffer.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures",
		  "https://www.owasp.org/index.php/Buffer_Overflow"
        ]
      },
      "uuid": "df2704ca-b534-11e9-a2a3-2a2ae2dbcce4",
      "value": "Buffer Overflow"
    },
	{
      "description": "A directory traversal (or path traversal) consists in exploiting insufficient security validation (or) sanitization of user-supplied input file names, such that characters representing traverse to parent directory are passed through to the file APIs.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures",
		  "https://en.wikipedia.org/wiki/Directory_traversal_attack"
        ]
      },
      "uuid": "df270614-b534-11e9-a2a3-2a2ae2dbcce4",
      "value": "Directory Traversal"
    },
	{
      "description": "Arbitrary code execution (ACE) is used to describe an attacker ability to execute arbitrary commands or code on a target machine or in a target process.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures",
		  "https://en.wikipedia.org/wiki/Arbitrary_code_execution"
        ]
      },
      "uuid": "25e66738-b536-11e9-a2a3-2a2ae2dbcce4",
      "value": "Arbitrary Command Execution"
    },
	{
      "description": "Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures",
		  "https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)"
        ]
      },
      "uuid": "25e66fee-b536-11e9-a2a3-2a2ae2dbcce4",
      "value": "Cross-Site Scripting (XSS)"
    },
	{
      "description": "Use of HTTP protocol to achieve unauthenticated remote access to the system.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "25e67188-b536-11e9-a2a3-2a2ae2dbcce4",
      "value": "Unauthenticated Remote Access via HTTP"
    },
	{
      "description": "Vulnerability that allows for the injection of crafted messages to the system.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "25e672c8-b536-11e9-a2a3-2a2ae2dbcce4",
      "value": "Polymorphic Typing"
    },
	{
      "description": "XSS that does not require authentication to exploit the vulnerable system.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "25e673f4-b536-11e9-a2a3-2a2ae2dbcce4",
      "value": "Authenticated Persistent Cross-Site Scripting (XSS)"
    },
	{
      "description": "Stack overflows occur when variable size data is copied into fixed length buffers located on the program stack without any bounds checking.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures",
		  "https://www.owasp.org/index.php/Testing_for_Stack_Overflow"
        ]
      },
      "uuid": "4a29d3e0-b537-11e9-a2a3-2a2ae2dbcce4",
      "value": "Stack Overflow"
    },
	{
      "description": "Memory corruption can be described as the vulnerability that may occur in a computer system when its memory is altered without an explicit assignment. The contents of a memory location are modified due to programming errors which enable attackers to execute an arbitrary code.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures",
		  "https://economictimes.indiatimes.com/definition/memory-corruption"
        ]
      },
      "uuid": "4a29d624-b537-11e9-a2a3-2a2ae2dbcce4",
      "value": "Memory Corruption"
    },
	{
      "description": "A heap overflow or heap overrun is a type of buffer overflow that occurs in the heap data area. Heap overflows are exploitable in a different manner to that of stack-based overflows. Memory on the heap is dynamically allocated by the application at run-time and typically contains program data. Exploitation is performed by corrupting this data in specific ways to cause the application to overwrite internal structures such as linked list pointers. The canonical heap overflow technique overwrites dynamic memory allocation linkage (such as malloc meta data) and uses the resulting pointer exchange to overwrite a program function pointer.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures",
		  "https://en.wikipedia.org/wiki/Heap_overflow"
        ]
      },
      "uuid": "4a29d778-b537-11e9-a2a3-2a2ae2dbcce4",
      "value": "Heap Overflow"
    },
	{
      "description": "Vulnerability that allows for the sending of malformed TCP options with the intent on causing denial of service events.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "4a29d8ae-b537-11e9-a2a3-2a2ae2dbcce4",
      "value": "TCP Connection DoS via Malformed TCP Options"
    },
	{
      "description": "A vulnerability that allows for the system to accept unsolicited ARP replies that it would normally ignore.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "4a29d9da-b537-11e9-a2a3-2a2ae2dbcce4",
      "value": "Unsolicited Reverse ARP Replies"
    },
	{
      "description": "Vulnerability that allows for the manipulation of IP address assignments managed by the DHCP server.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "8a4b6654-b538-11e9-a2a3-2a2ae2dbcce4",
      "value": "Logical Flaw in IPv4 Assignment by the IPDHCPC DHCP client"
    },
	{
      "description": "Vulnerability that allows for denial of service events due to a flaw in the way a system parses IGMP information.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "8a4b68ca-b538-11e9-a2a3-2a2ae2dbcce4",
      "value": "DoS via NULL Dereference in IGMP Parsing"
    },
	{
      "description": "Vulnerability that allows for memory manipulation after it has been freed by the system.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "8a4b6c58-b538-11e9-a2a3-2a2ae2dbcce4",
      "value": "Use-After-Free"
    },
	{
      "description": "Vulnerability that allows for the extraction of data structures or objects from a series of bytes.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures",
		  "https://www.exploit-db.com/docs/english/44756-deserialization-vulnerability.pdf"
        ]
      },
      "uuid": "8a4b6dc0-b538-11e9-a2a3-2a2ae2dbcce4",
      "value": "Deserialization"
    },
	{
      "description": "Code injection is the exploitation of a computer bug that is caused by processing invalid data. Injection is used by an attacker to introduce (or inject) code into a vulnerable computer program and change the course of execution. The result of successful code injection can be disastrous, for example by allowing computer worms to propagate.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Code_injection"
        ]
      },
      "uuid": "da556a08-c809-11e9-a32f-2a2ae2dbcce4",
      "value": "Code Injection"
    },
	{
      "description": "An exploit will commonly inject a shellcode into the target process before or at the same time as it exploits a vulnerability to gain control over the program counter. The program counter is adjusted to point to the shellcode, after which it gets executed and performs its task. Injecting the shellcode is often done by storing the shellcode in data sent over the network to the vulnerable process, by supplying it in a file that is read by the vulnerable process or through the command line or environment in the case of local exploits.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Shellcode#Shellcode_execution_strategy"
        ]
      },
      "uuid": "da556eae-c809-11e9-a32f-2a2ae2dbcce4",
      "value": "Shell Code Execution"
    },
	{
      "description": "Form of information disclosure vulnerability that exposes information pertaining to files.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/File_inclusion_vulnerability"
        ]
      },
      "uuid": "da557016-c809-11e9-a32f-2a2ae2dbcce4",
      "value": "Arbitrary File Discolsure"
    },
	{
      "description": "A brute force attack can manifest itself in many different ways, but primarily consists in an attacker configuring predetermined values, making requests to a server using those values, and then analyzing the response. For the sake of efficiency, an attacker may use a dictionary attack (with or without mutations) or a traditional brute-force attack (with given classes of characters e.g. alphanumerical, special, case (in)sensitive). Considering a given method, number of tries, efficiency of the system which conducts the attack, and estimated efficiency of the system which is attacked the attacker is able to calculate approximately how long it will take to submit all chosen predetermined values.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Brute_force_attack"
        ]
      },
      "uuid": "da557340-c809-11e9-a32f-2a2ae2dbcce4",
      "value": "Brute Force Vulnerability"
    },
	{
      "description": "A vulnerability that can manifest in various part of the OSI model that relies on credentials as a part of the system process. Exploitation discloses credential information to the attacker.",
      "meta": {
        "refs": [
          "https://www.netsparker.com/blog/web-security/information-disclosure-issues-attacks/"
        ]
      },
      "uuid": "438240b8-b532-11e9-a2a3-2a2ae2dbcce4",
      "value": "Credential Disclosure"
    },
	{
      "description": "Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker's choosing. If the victim is a normal user, a successful CSRF attack can force the user to perform state changing requests like transferring funds, changing their email address, and so forth. If the victim is an administrative account, CSRF can compromise the entire web application.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)"
        ]
      },
      "uuid": "da5574b2-c809-11e9-a32f-2a2ae2dbcce4",
      "value": "Cross Site Request Forgery (CSRF)"
    },
	{
      "description": "Hardcoded Passwords, also often referred to as Embedded Credentials, are plain text passwords or other secrets in source code. Password hardcoding refers to the practice of embedding plain text (non-encrypted) passwords and other secrets (SSH Keys, DevOps secrets, etc.) into the source code. Default, hardcoded passwords may be used across many of the same devices, applications, systems, which helps simplify set up at scale, but at the same time, poses considerable cybersecurity risk.",
      "meta": {
        "refs": [
          "https://www.beyondtrust.com/resources/glossary/hardcoded-embedded-passwords"
        ]
      },
      "uuid": "da5575de-c809-11e9-a32f-2a2ae2dbcce4",
      "value": "Hard Coded Password"
    },
	{
      "description": "Vulnerabilities within code that insecurly handles string concatenation that allows attackers to exploit positions in strings.",
      "meta": {
        "refs": [
          "https://www.netsparker.com/blog/web-security/string-concatenation-format-string-vulnerabilities/"
        ]
      },
      "uuid": "da55770a-c809-11e9-a32f-2a2ae2dbcce4",
      "value": "Concatenation Bypass Vulnerability"
    },
	{
      "description": "A vulnerability that allows attackers to execute arbitrary code without the need of authentication before execution on the system.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Arbitrary_code_execution"
        ]
      },
      "uuid": "da557a02-c809-11e9-a32f-2a2ae2dbcce4",
      "value": "Unauthenticated Code Execution"
    },
	{
      "description": "An Access Control List blocks devices based on their IP address. Network devices keep an ARP table that associates every IP address with its corresponding MAC address. When a request is being made from a device that has been blocked, the networ device inspects the packets and analyses the source IP address. If the source IP address match what is on its ACL, then the traffic is blocked. A Bypass ACL vulnerability allows attackers to move around the network devices ability to block traffic.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Access-control_list"
        ]
      },
      "uuid": "91c6ba1e-cb3b-11e9-a32f-2a2ae2dbcce4",
      "value": "Bypass ACL"
    },
	{
      "description": "An XML External Entity attack is a type of attack against an application that parses XML input. This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. This attack may lead to the disclosure of confidential data, denial of service, server side request forgery, port scanning from the perspective of the machine where the parser is located, and other system impacts.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing"
        ]
      },
      "uuid": "91c6bce4-cb3b-11e9-a32f-2a2ae2dbcce4",
      "value": "XML External Entity (XXE)"
    },
	{
      "description": "By exploiting a command injection vulnerability on a vulnerable application an attacker can add additional commands or inject his own operating system commands. This means that during a command injection attack the adversary can easily take complete control of the host operating system of the web server. Unauthenticated Command Injection allows exploits to be run without the need to authenticate to the system.",
      "meta": {
        "refs": [
          "https://www.netsparker.com/blog/web-security/command-injection-vulnerability/"
        ]
      },
      "uuid": "91c6be42-cb3b-11e9-a32f-2a2ae2dbcce4",
      "value": "Unauthenticated Command Injection"
    },
	{
      "description": "By exploiting a command injection vulnerability on a vulnerable application an attacker can add additional commands or inject his own operating system commands. This means that during a command injection attack the adversary can easily take complete control of the host operating system of the web server.",
      "meta": {
        "refs": [
          "https://www.netsparker.com/blog/web-security/command-injection-vulnerability/"
        ]
      },
      "uuid": "91c6c202-cb3b-11e9-a32f-2a2ae2dbcce4",
      "value": "Command Injection"
    },
	{
      "description": "A Default Credential vulnerability is a type of vulnerability that is most commonly found to affect the devices like modems, routers, digital cameras, and other devices having some pre-set (default) administrative credentials to access all configuration settings. The vendor or manufacturer of such devices uses a single pre-defined set of admin credentials to access the device configurations, and any potential hacker can misuse this fact to hack such devices, if those credentials are not changed by the consumers.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Default_Credential_vulnerability"
        ]
      },
      "uuid": "91c6c360-cb3b-11e9-a32f-2a2ae2dbcce4",
      "value": "Default Password"
    },
	{
      "description": "While most applications require authentication to gain access to private information or to execute tasks, not every authentication method is able to provide adequate security. Negligence, ignorance, or simple understatement of security threats often result in authentication schemes that can be bypassed by simply skipping the log in page and directly calling an internal page that is supposed to be accessed only after authentication has been performed.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Testing_for_Bypassing_Authentication_Schema_(OTG-AUTHN-004)"
        ]
      },
      "uuid": "60225174-cb3d-11e9-a32f-2a2ae2dbcce4",
      "value": "Web Interface Authentication Bypass"
    },
	{
      "description": "Authentication Bypass vulnerabilities allows attackers to bypass the normal login session to a system or application. Thus, giving the attacker direct access to the system without authenticating using valid credentials.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "60225638-cb3d-11e9-a32f-2a2ae2dbcce4",
      "value": "Authentication Bypass"
    },
	{
      "description": "A vulnerability in that allows a local or remote attacker to bypass security restrictions on a targeted system.",
      "meta": {
        "refs": [
          "https://tools.cisco.com/security/center/viewAlert.x?alertId=56725",
		  "https://www.tenable.com/plugins/nessus/123514"
        ]
      },
      "uuid": "6022587c-cb3d-11e9-a32f-2a2ae2dbcce4",
      "value": "Security Feature Bypass"
    },
	{
      "description": "A type of buffer overflow vulnerability that allows attackers to exploit Out of Bounds conditions to write data to the system.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Buffer_overflow"
        ]
      },
      "uuid": "602259b2-cb3d-11e9-a32f-2a2ae2dbcce4",
      "value": "Out of Bound Write"
    },
	{
      "description": "In computing, an uninitialized variable is a variable that is declared but is not set to a definite known value before it is used. It will have some value, but not a predictable one. As such, it is a programming error and a common source of bugs in software. Exploiting these types of variables allows attackers to gain access to aditional system locations or resources.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Uninitialized_variable"
        ]
      },
      "uuid": "60225ade-cb3d-11e9-a32f-2a2ae2dbcce4",
      "value": "Uninitialized Variable Access"
    },
	{
      "description": "In computer security, arbitrary code execution (ACE) is used to describe an attacker's ability to execute arbitrary commands or code on a target machine or in a target process.An arbitrary code execution vulnerability is a security flaw in software or hardware allowing arbitrary code execution. A program that is designed to exploit such a vulnerability is called an arbitrary code execution exploit. The ability to trigger arbitrary code execution over a network (especially via a wide-area network such as the Internet) is often referred to as remote code execution (RCE).",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Arbitrary_code_execution"
        ]
      },
      "uuid": "ad0e3740-cb3e-11e9-a32f-2a2ae2dbcce4",
      "value": "Arbitrary Code Execution"
    },
	{
      "description": "Form Jacking is a term used to describe the use of malicious JavaScript code to steal credit card details and other information from payment forms on the checkout web pages of e-commerce sites. With the way the mentioned companies operate is with the use of web forms to collect user information to complete a customer-to-service provider-transaction. As for many years, their users learned to trust the web form system they use, the moment the Form Jacking occurred, it became an instant success for the threat actors.",
      "meta": {
        "refs": [
          "https://www.symantec.com/blogs/threat-intelligence/formjacking-attacks-retailers",
		  "https://hackercombat.com/formjacking-in-the-nutshell/"
        ]
      },
      "uuid": "ad0e39fc-cb3e-11e9-a32f-2a2ae2dbcce4",
      "value": "Form Jacking"
    },
	{
      "description": "As the name suggests Arbitrary File Upload Vulnerabilities is a type of vulnerability which occurs in web applications if the file type uploaded is not checked, filtered or sanitized. The main danger of these kind of vulnerabilities is that the attacker can upload a malicious PHP , ASP etc. script and execute it. The main idea is to get the access to the server and execute desired code. For example an Attacker who have gained access to such kind of vulnerability can upload a malicious shell script and further can control the machine to execute desired commands, which would lead to a full compromise of the server.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "ad0e3e70-cb3e-11e9-a32f-2a2ae2dbcce4",
      "value": "Arbitrary File Upload"
    },
	{
      "description": "File upload restriction bypass allows for the upload of files to vulnerabile systems without checking if acceptable to the system.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "ab457f4c-cdb7-11e9-a32f-2a2ae2dbcce4",
      "value": "File Upload Restriction Bypass"
    },
	{
      "description": "Reflected Cross-site Scripting (XSS) occur when an attacker injects browser executable code within a single HTTP response.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Testing_for_Reflected_Cross_site_scripting_(OTG-INPVAL-001)"
        ]
      },
      "uuid": "ab45829e-cdb7-11e9-a32f-2a2ae2dbcce4",
      "value": "Reflected Cross-site Scripting (XSS)"
    },
	{
      "description": "The persistent (or stored) XSS vulnerability is a more devastating variant of a cross-site scripting flaw. It occurs when the data provided by the attacker is saved by the server, and then permanently displayed on normal pages returned to other users in the course of regular browsing, without proper HTML escaping. A classic example of this is with online message boards where users are allowed to post HTML formatted messages for other users to read.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Cross-site_scripting#Persistent_(or_stored)"
        ]
      },
      "uuid": "ab458406-cdb7-11e9-a32f-2a2ae2dbcce4",
      "value": "Persistent Cross-Site Scripting"
    },
	{
      "description": "An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information. In this particular instance it would be information regarding local file systems.",
      "meta": {
        "refs": [
          "https://www.netsparker.com/blog/web-security/information-disclosure-issues-attacks/",
		  "https://cwe.mitre.org/data/definitions/200.html"
        ]
      },
      "uuid": "ab45862c-cdb7-11e9-a32f-2a2ae2dbcce4",
      "value": "Local File Disclosure"
    },
	{
      "description": "HTTP header injection is a general class of web application security vulnerability which occurs when Hypertext Transfer Protocol (HTTP) headers are dynamically generated based on user input. Header injection in HTTP responses can allow for HTTP response splitting, Session fixation via the Set-Cookie header, cross-site scripting (XSS), and malicious redirect attacks via the location header. HTTP header injection is a relatively new area for web-based attacks, and has primarily been pioneered by Amit Klein in his work on request-response smuggling-splitting.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/HTTP_header_injection"
        ]
      },
      "uuid": "ab458a6e-cdb7-11e9-a32f-2a2ae2dbcce4",
      "value": "Header Injection"
    },
	{
      "description": "CSV Injection, also known as Formula Injection, describes a vulnerability arising from this scenario, in which untrusted input is exported directly to comma-separated-values (CSV) files as data for subsequent import into a spreadsheet.",
      "meta": {
        "refs": [
          "https://affinity-it-security.com/what-is-csv-injection/"
        ]
      },
      "uuid": "e2b80084-cdb8-11e9-a32f-2a2ae2dbcce4",
      "value": "CSV Injection"
    },
	{
      "description": "Type of path traversal that allows attackers to read arbitrary files on a vulnerable system.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Path_Traversal"
        ]
      },
      "uuid": "e2b802e6-cdb8-11e9-a32f-2a2ae2dbcce4",
      "value": "Arbitrary File Read"
    },
	{
      "description": "A file inclusion vulnerability is a type of web vulnerability that is most commonly found to affect web applications that rely on a scripting run time. This issue is caused when an application builds a path to executable code using an attacker-controlled variable in a way that allows the attacker to control which file is executed at run time. A file include vulnerability is distinct from a generic directory traversal attack, in that directory traversal is a way of gaining unauthorized file system access, and a file inclusion vulnerability subverts how an application loads code for execution. Successful exploitation of a file inclusion vulnerability will result in remote code execution on the web server that runs the affected web application. An attacker can use remote code execution to create a web shell on the web server, which can be used for website defacement.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/File_inclusion_vulnerability"
        ]
      },
      "uuid": "e2b80430-cdb8-11e9-a32f-2a2ae2dbcce4",
      "value": "Local File Inclusion"
    },
	{
      "description": "A form of arbitrary code execution that can be run on vulnerable systems without requiring prior authorization to run.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Arbitrary_code_execution"
        ]
      },
      "uuid": "9f74807a-ce73-11e9-a32f-2a2ae2dbcce4",
      "value": "Unauthenticated Remote Code Execution"
    },
	{
      "description": "Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Command_Injection"
        ]
      },
      "uuid": "d2e27924-cff1-11e9-bb65-2a2ae2dbcce4",
      "value": "Command Injection"
    },
	{
      "description": "A Cross-Site-Scripting (XSS) vulnerability that allows for modifications to be made on the host system.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Cross-site_scripting"
        ]
      },
      "uuid": "e992990e-d359-11e9-bb65-2a2ae2dbcce4",
      "value": "Cross Site Host Modification"
    },
	{
      "description": "A type of information disclosure vulnerability that targets CGI streams.",
      "meta": {
        "refs": [
          "https://www.netsparker.com/blog/web-security/information-disclosure-issues-attacks/"
        ]
      },
      "uuid": "e9929bd4-d359-11e9-bb65-2a2ae2dbcce4",
      "value": "Stream Disclosure"
    },
	{
      "description": "Bypass vulnerability that allows attacker to exploit the system in a way that side steps user account protections.",
      "meta": {
        "refs": [
          "https://attack.mitre.org/techniques/T1088/"
        ]
      },
      "uuid": "7cab3e20-d58b-11e9-bb65-2a2ae2dbcce4",
      "value": "UAC Protection Bypass"
    },
	{
      "description": "A type of unrestricted file upload vulnerability that allows the attacker to exploit the system and bypass file upload protections.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Unrestricted_File_Upload"
        ]
      },
      "uuid": "7cab40f0-d58b-11e9-bb65-2a2ae2dbcce4",
      "value": "Upload Protection Bypass Code Execution"
    },
	{
      "description": "Multiple Stored XSS vulnerability is simply an expanded version of a typical Stored XSS vulnerability.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)",
		  "https://www.imperva.com/learn/application-security/cross-site-scripting-xss-attacks/",
		  "https://portswigger.net/web-security/cross-site-scripting/stored"
        ]
      },
      "uuid": "7cab423a-d58b-11e9-bb65-2a2ae2dbcce4",
      "value": "Multiple Stored XSS"
    },
	{
      "description": "Vulnerability that allows an authenticated attacker to exploit the system and commit several SQL injections in succession.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/SQL_Injection"
        ]
      },
      "uuid": "7cab4384-d58b-11e9-bb65-2a2ae2dbcce4",
      "value": "Multiple Authenticated SQL Injections"
    },
	{
      "description": "Vulnerability that allows for the acceptance of improper or unauthorized data to a system.",
      "meta": {
        "refs": [
          "https://tools.cisco.com/security/center/viewAlert.x?alertId=59171"
        ]
      },
      "uuid": "7cab44c4-d58b-11e9-bb65-2a2ae2dbcce4",
      "value": "Invalid Read"
    },
	{
      "description": "Double free errors occur when free is called more than once with the same memory address as an argument. Calling free twice on the same value can lead to memory leak. When a program calls free twice with the same argument, the program memory management data structures become corrupted and could allow a malicious user to write values in arbitrary memory spaces. This corruption can cause the program to crash or, in some circumstances, alter the execution flow. By overwriting particular registers or memory spaces, an attacker can trick the program into executing code of his or her own choosing, often resulting in an interactive shell with elevated permissions. When a buffer is free'd, a linked list of free buffers is read to rearrange and combine the chunks of free memory to be able to allocate larger buffers in the future. These chunks are laid out in a double linked list which points to previous and next chunks. Unlinking an unused buffer which is what happens when free is called could allow an attacker to write arbitrary values in memory; essentially overwriting valuable registers, calling shellcode from its own buffer. Doubly freeing memory may result in a write-what-where condition, allowing an attacker to execute arbitrary code.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Doubly_freeing_memory"
        ]
      },
      "uuid": "7cab45fa-d58b-11e9-bb65-2a2ae2dbcce4",
      "value": "Double-Free"
    },
	{
      "description": "Uploaded files represent a significant risk to applications. The first step in many attacks is to get some code to the system to be attacked. Then the attack only needs to find a way to get the code executed. Using a file upload helps the attacker accomplish the first step. The consequences of unrestricted file upload can vary, including complete system takeover, an overloaded file system or database, forwarding attacks to back-end systems, client-side attacks, or simple defacement. It depends on what the application does with the uploaded file and especially where it is stored. There are really two classes of problems here. The first is with the file metadata, like the path and file name. These are generally provided by the transport, such as HTTP multi-part encoding. This data may trick the application into overwriting a critical file or storing the file in a bad location. You must validate the metadata extremely carefully before using it. The other class of problem is with the file size or content. The range of problems here depends entirely on what the file is used for. See the examples below for some ideas about how files might be misused. To protect against this type of attack, you should analyse everything your application does with files and think carefully about what processing and interpreters are involved.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Unrestricted_File_Upload"
        ]
      },
      "uuid": "34c8228e-db0e-11e9-8a34-2a2ae2dbcce4",
      "value": "Unrestricted File Upload"
    },
	{
      "description": "Improper Access Control weakness describes a failure in the AAA security model. In this case the failure is in the restrictions placed on accounts.",
      "meta": {
        "refs": [
          "https://www.immuniweb.com/vulnerability/improper-access-control.html"
        ]
      },
      "uuid": "34c8257c-db0e-11e9-8a34-2a2ae2dbcce4",
      "value": "Improper Access Restrictions"
    },
	{
      "description": "A privileged file access enumeration vulnerability allows attackers possessing user-only rights can gather intelligence or profile other user account activities by brute forcing a correct file name due to inconsistent error messaging.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "34c826ee-db0e-11e9-8a34-2a2ae2dbcce4",
      "value": "Privileged File Access Enumeration"
    },
	{
      "description": "In software, a stack buffer overflow or stack buffer overrun occurs when a program writes to a memory address on the program's call stack outside of the intended data structure, which is usually a fixed-length buffer. Stack buffer overflow bugs are caused when a program writes more data to a buffer located on the stack than what is actually allocated for that buffer. This almost always results in corruption of adjacent data on the stack, and in cases where the overflow was triggered by mistake, will often cause the program to crash or operate incorrectly. Stack buffer overflow is a type of the more general programming malfunction known as buffer overflow (or buffer overrun). Overfilling a buffer on the stack is more likely to derail program execution than overfilling a buffer on the heap because the stack contains the return addresses for all active function calls.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Stack_buffer_overflow"
        ]
      },
      "uuid": "10e80bb8-dd70-11e9-8a34-2a2ae2dbcce4",
      "value": "Stack Buffer Overflow"
    },
	{
      "description": "Insufficient validation of signatures used by the application or system.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Bypass"
        ]
      },
      "uuid": "10e80e42-dd70-11e9-8a34-2a2ae2dbcce4",
      "value": "Signature Bypass"
    },
	{
      "description": "A form of path traversal that allows the attacker to exploit vulnerabilities which allow this to happen at the application URL.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Path_Traversal"
        ]
      },
      "uuid": "e3824976-e185-11e9-81b4-2a2ae2dbcce4",
      "value": "URL Path Traversal"
    },
	{
      "description": "The Structured Exception Handler (SEH) is a protection mechanism that was implemented to mitigate the abuse of buffer overflows. Local SEH Overflow vulnerabilities allow attackers to exploit the local system and still cause a buffer overflow event.",
      "meta": {
        "refs": [
          "https://www.fuzzysecurity.com/tutorials/expDev/3.html"
        ]
      },
      "uuid": "e3824c0a-e185-11e9-81b4-2a2ae2dbcce4",
      "value": "Local SEH Overflow"
    },
	{
      "description": "The Structured Exception Handler (SEH) is a protection mechanism that was implemented to mitigate the abuse of buffer overflows. Local SEH Overflow vulnerabilities allow attackers to exploit the local system and still cause a buffer overflow event. A POST SEH Overflow event is a continuation of this and allows the attacker to further manipulate the system after the over flow event has happened.",
      "meta": {
        "refs": [
          "https://www.fuzzysecurity.com/tutorials/expDev/3.html"
        ]
      },
      "uuid": "e3824d5e-e185-11e9-81b4-2a2ae2dbcce4",
      "value": "POST SEH Overflow"
    },
	{
      "description": "Code Injection is the general term for attack types which consist of injecting code that is then interpreted/executed by the application. Remote code injection allows the attacker to exploit the system remotely versus having to be authenticated to the local system.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Code_Injection"
        ]
      },
      "uuid": "e3824eb2-e185-11e9-81b4-2a2ae2dbcce4",
      "value": "Remote Code Injection"
    },
	{
      "description": "The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.",
      "meta": {
        "refs": [
          "https://cwe.mitre.org/data/definitions/88.html"
        ]
      },
      "uuid": "e3824ff2-e185-11e9-81b4-2a2ae2dbcce4",
      "value": "Argument Injection"
    },
	{
      "description": "The software reads data past the end, or before the beginning, of the intended buffer. Out-Of-Bounds access extends this to allow the attacker to gain access to the sysetm.",
      "meta": {
        "refs": [
          "https://cwe.mitre.org/data/definitions/125.html"
        ]
      },
      "uuid": "154c870e-e187-11e9-81b4-2a2ae2dbcce4",
      "value": "Out-Of-Bounds Access"
    },
	{
      "description": "In computer programming, bounds checking is any method of detecting whether a variable is within some bounds before it is used. It is usually used to ensure that a number fits into a given type (range checking), or that a variable being used as an array index is within the bounds of the array (index checking). A failed bounds check usually results in the generation of some sort of exception signal. Missing bounds check means that the system or application did not check prior to vailidattion at all.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Bounds_checking"
        ]
      },
      "uuid": "154c89c0-e187-11e9-81b4-2a2ae2dbcce4",
      "value": "Missing Bounds Check"
    },
	{
      "description": "In computer security and programming, a buffer over-read is an anomaly where a program, while reading data from a buffer, overruns the buffer's boundary and reads (or tries to read) adjacent memory. This is a special case of violation of memory safety. Buffer over-reads can be triggered, as in the Heartbleed bug, by maliciously crafted inputs that are designed to exploit a lack of bounds checking to read parts of memory not intended to be accessible. They may also be caused by programming errors alone. Buffer over-reads can result in erratic program behavior, including memory access errors, incorrect results, a crash, or a breach of system security. Thus, they are the basis of many software vulnerabilities and can be maliciously exploited to access privileged information. Programming languages commonly associated with buffer over-reads include C and C++, which provide no built-in protection against using pointers to access data in any part of virtual memory, and which do not automatically check that reading data from a block of memory is safe; respective examples are attempting to read more elements than contained in an array, or failing to append a trailing terminator to a null-terminated string. Bounds checking can prevent buffer over-reads, while fuzz testing can help detect them.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Buffer_over-read"
        ]
      },
      "uuid": "154c8c54-e187-11e9-81b4-2a2ae2dbcce4",
      "value": "Buffer Over-Read"
    },
	{
      "description": "If a procedure continues to call itself until the stack space is full, an Out of Stack Space error will occur. This procedure is called an unbounded recursion, one that has no end.",
      "meta": {
        "refs": [
          "https://www.developer.com/tech/article.php/612001/Understanding-Recursion.htm"
        ]
      },
      "uuid": "154c8d9e-e187-11e9-81b4-2a2ae2dbcce4",
      "value": "Unbounded Recursion"
    },
	{
      "description": "SSIs are directives present on Web applications used to feed an HTML page with dynamic contents. They are similar to CGIs, except that SSIs are used to execute some actions before the current page is loaded or while the page is being visualized. In order to do so, the web server analyzes SSI before supplying the page to the user. The Server-Side Includes attack allows the exploitation of a web application by injecting scripts in HTML pages or executing arbitrary codes remotely. It can be exploited through manipulation of SSI in use in the application or force its use through user input fields.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Server-Side_Includes_(SSI)_Injection"
        ]
      },
      "uuid": "154c8ed4-e187-11e9-81b4-2a2ae2dbcce4",
      "value": "Server Side Include (SSI) Injection"
    },
	{
      "description": "The attacker directly or indirectly modifies environment variables used by or controlling the target software. The attacker's goal is to cause the target software to deviate from its expected operation in a manner that benefits the attacker.",
      "meta": {
        "refs": [
          "https://capec.mitre.org/data/definitions/13.html"
        ]
      },
      "uuid": "154c912c-e187-11e9-81b4-2a2ae2dbcce4",
      "value": "Subverting Environment Variable Values"
    },
	{
      "description": "A vulnerability in the Structured Exception Handler (SEH) that allows for a buffer overflow event to occur.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Buffer_overflow"
        ]
      },
      "uuid": "420c23dc-e5f9-11e9-81b4-2a2ae2dbcce4",
      "value": "Buffer Overflow (SEH) Remote"
    },
	{
      "description": "A vulnerability that allows unauthenticated users to download new configurations to a system or application.",
      "meta": {
        "refs": [
          "https://www.exploit-db.com/exploits/47433",
		  "https://packetstormsecurity.com/files/133884/ZTE-ZXHN-H108N-Unauthenticated-Configuration-Download.html"
        ]
      },
      "uuid": "420c2670-e5f9-11e9-81b4-2a2ae2dbcce4",
      "value": "Unauthenticated Configuration Download"
    },
	{
      "description": "A vulnerability that allows an attacker to escalate privileges on a remote system or application.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Privilege_escalation"
        ]
      },
      "uuid": "420c27c4-e5f9-11e9-81b4-2a2ae2dbcce4",
      "value": "Remote Privilege Escalation"
    },
	{
      "description": "In computer security, a side-channel attack is any attack based on information gained from the implementation of a computer system, rather than weaknesses in the implemented algorithm itself (e.g. cryptanalysis and software bugs). Timing information, power consumption, electromagnetic leaks or even sound can provide an extra source of information, which can be exploited. A timing attack watches data movement into and out of the CPU or memory on the hardware running the cryptosystem or algorithm. Simply by observing variations in how long it takes to perform cryptographic operations, it might be possible to determine the entire secret key. Such attacks involve statistical analysis of timing measurements and have been demonstrated across networks.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Side-channel_attack"
        ]
      },
      "uuid": "420c28fa-e5f9-11e9-81b4-2a2ae2dbcce4",
      "value": "Timing-Based Side-Channel Attack"
    },
	{
      "description": "In computing, circumventing security features in hacking.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Bypass"
        ]
      },
      "uuid": "420c2c7e-e5f9-11e9-81b4-2a2ae2dbcce4",
      "value": "Generic Bypass (by platform)"
    },
	{
      "description": "In a Universal Cross-Site Scripting (UXSS, or Universal XSS) attack, vulnerabilities in the browser itself or in the browser plugins are exploited (rather than vulnerabilities in other websites, as is the case with XSS attacks); such attacks are commonly used by Anonymous, along with DDoS, to compromise control of a network.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Cross-site_scripting"
        ]
      },
      "uuid": "420c2de6-e5f9-11e9-81b4-2a2ae2dbcce4",
      "value": "Universal Cross-Site Scripting (UXSS)"
    },
	{
      "description": "When the currently focused element is an input, selection.rootEditableElement in might point to a node inside the input's user-agent shadow DOM tree. Then insertFragmentForTestRendering is called, which might have side effects, e.g., if the inserted fragment contains an iframe element its onload handler will be called synchronously, and it's possible to reach the user-agent shadow root object by following the ancestor chain from the iframe.",
      "meta": {
        "refs": [
          "https://www.exploit-db.com/exploits/47452",
		  "https://packetstormsecurity.com/files/154676/WebKit-WebCore-ReplacementFragment-ReplacementFragment-User-Agent-Shadow-Root-Leak.html",
		  "https://bugs.chromium.org/p/project-zero/issues/detail?id=1896"
        ]
      },
      "uuid": "420c2f12-e5f9-11e9-81b4-2a2ae2dbcce4",
      "value": "User-agent Shadow Root Leak"
    },
	{
      "description": "In computing, circumventing security features in hacking, or taking a different approach to an issue in troubleshooting. In this specific type, the vulnerability allows the attacker to disable certain system or application functions.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Bypass"
        ]
      },
      "uuid": "cdb58e8c-e865-11e9-81b4-2a2ae2dbcce4",
      "value": "Disable Function Bypass"
    },
	{
      "description": "Remote command execution functions like Remote Code Execution with the difference being commands rather than code are being executed on the system or application.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Arbitrary_code_execution"
        ]
      },
      "uuid": "cdb59210-e865-11e9-81b4-2a2ae2dbcce4",
      "value": "Remote Command Execution"
    },
	{
      "description": "A Default Credential vulnerability is a type of vulnerability that is most commonly found to affect the devices like modems, routers, digital cameras, and other devices having some pre-set (default) administrative credentials to access all configuration settings. The vendor or manufacturer of such devices uses a single pre-defined set of admin credentials to access the device configurations, and any potential hacker can misuse this fact to hack such devices, if those credentials are not changed by the consumers.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Default_Credential_vulnerability"
        ]
      },
      "uuid": "cdb59378-e865-11e9-81b4-2a2ae2dbcce4",
      "value": "Default Credentials"
    },
	{
      "description": "Like an arbitrary code execution vulnerability, the write vulnerability allows for the writing to or from a file on the system.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Arbitrary_code_execution"
        ]
      },
      "uuid": "481c75ba-ee96-11e9-81b4-2a2ae2dbcce4",
      "value": "Arbitrary File Write"
    },
	{
      "description": "Rather than directly attacking crypto, attackers steal keys, execute man-in-the-middle attacks, or steal clear text data off the server, while in transit, or from the user’s client, e.g. browser. A manual attack is generally required. Previously retrieved password databases could be brute forced by Graphics Processing Units (GPUs).",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"
        ]
      },
      "uuid": "513c9bda-f75f-11e9-8f0b-362b9e155667",
      "value": "Clear Text Transmission"
    },
	{
      "description": "Rather than directly attacking crypto, attackers steal keys, execute man-in-the-middle When a service is created whose executable path contains spaces and isn’t enclosed within quotes, leads to a vulnerability known as Unquoted Service Path which allows a user to gain SYSTEM privileges (only if the vulnerable service is running with SYSTEM privilege level which most of the time it is). In Windows, if the service is not enclosed within quotes and is having spaces, it would handle the space as a break and pass the rest of the service path as an argument.",
      "meta": {
        "refs": [
          "https://medium.com/@SumitVerma101/windows-privilege-escalation-part-1-unquoted-service-path-c7a011a8d8ae#targetText=When%20a%20service%20is%20created,of%20the%20time%20it%20is)."
        ]
      },
      "uuid": "513c9e82-f75f-11e9-8f0b-362b9e155667",
      "value": "Unquoted Service Path"
    },
	{
      "description": "Authorization is the concept of allowing access to resources only to those permitted to use them. Testing for Authorization means understanding how the authorization process works, and using that information to circumvent the authorization mechanism. Authorization is a process that comes after a successful authentication, so the tester will verify this point after he holds valid credentials, associated with a well-defined set of roles and privileges. During this kind of assessment, it should be verified if it is possible to bypass the authorization schema, find a path traversal vulnerability, or find ways to escalate the privileges assigned to the tester.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Testing_for_Authorization"
        ]
      },
      "uuid": "513c9fd6-f75f-11e9-8f0b-362b9e155667",
      "value": "Authorization Bypass"
    },
	{
      "description": "Applications can unintentionally leak information about their configuration, internal workings, or violate privacy through a variety of application problems. Applications can also leak internal state via how long they take to process certain operations or via different responses to differing inputs, such as displaying the same error text with different error numbers. Web applications will often leak information about their internal state through detailed or debug error messages. Often, this information can be leveraged to launch or even automate more powerful attacks.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Top_10_2007-Information_Leakage_and_Improper_Error_Handling"
        ]
      },
      "uuid": "513ca2ba-f75f-11e9-8f0b-362b9e155667",
      "value": "Information Leak"
    },
	{
      "description": "A stack overflow that specifically targets DEP (Data Execution Prevention) of a system in order to take control of an executable.",
      "meta": {
        "refs": [
          "https://0x00sec.org/t/bypass-data-execution-protection-dep/6988"
        ]
      },
      "uuid": "513ca404-f75f-11e9-8f0b-362b9e155667",
      "value": "Local Stack Overflow (DEP Bypass)"
    },
	{
      "description": "Cross-origin resource sharing is a mechanism that allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource was served. A web page may freely embed cross-origin images, stylesheets, scripts, iframes, and videos.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Cross-origin_resource_sharing"
        ]
      },
      "uuid": "2570cdce-0325-11ea-8d71-362b9e155667",
      "value": "Cross-Origin Resource Sharing"
    },
	{
      "description": "Usually, when a piece of code doesn’t verify the type of object that is passed to it, and uses it blindly without type-checking, it leads to type confusion. Type confusion can be very dangerous because a type is expressed as a layout of memory in the lower level implementation of an applications memory usage. Also with type confusion, wrong function pointers or data are fed into the wrong piece of code. In some circumstances this can lead to code execution.",
      "meta": {
        "refs": [
          "https://www.microsoft.com/security/blog/2015/06/17/understanding-type-confusion-vulnerabilities-cve-2015-0336/"
        ]
      },
      "uuid": "2570d026-0325-11ea-8d71-362b9e155667",
      "value": "Type Confusion"
    },
	{
      "description": "DNS spoofing, also referred to as DNS cache poisoning, is a form of computer security hacking in which corrupt Domain Name System data is introduced into the DNS resolver cache, causing the name server to return an incorrect result record, e.g. an IP address.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/DNS_spoofing"
        ]
      },
      "uuid": "2570d3aa-0325-11ea-8d71-362b9e155667",
      "value": "DNS Poisoning"
    },
	{
      "description": "In computer science, a memory leak is a type of resource leak that occurs when a computer program incorrectly manages memory allocations in such a way that memory which is no longer needed is not released. A memory leak may also happen when an object is stored in memory but cannot be accessed by the running code.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Memory_leak"
        ]
      },
      "uuid": "2570d508-0325-11ea-8d71-362b9e155667",
      "value": "Memory Leak"
    },
	{
      "description": "In computing, a denial-of-service attack is a cyber-attack in which the perpetrator seeks to make a machine or network resource unavailable to its intended users by temporarily or indefinitely disrupting services of a host connected to the Internet.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Denial-of-service_attack"
        ]
      },
      "uuid": "2570dc6a-0325-11ea-8d71-362b9e155667",
      "value": "Denial of Service"
    },
	{
      "description": "In information security and programming, a buffer overflow, or buffer overrun, is an anomaly where a program, while writing data to a buffer, overruns the buffer's boundary and overwrites adjacent memory locations. However, in this case the vulnerability is specifically regarding the Structured Exception Handler (SEH), a mechanism that is actually designed to prevent a buffer overflow event from occuring in the first place.",
      "meta": {
        "refs": [
          "https://www.fuzzysecurity.com/tutorials/expDev/3.html",
		  "https://en.wikipedia.org/wiki/Buffer_overflow"
        ]
      },
      "uuid": "2570ddd2-0325-11ea-8d71-362b9e155667",
      "value": "Buffer Overflow (SEH)"
    },
	{
      "description": "Heap corruption is a vulnerability that allows for the attacker to exploit weaknesses in the heap portion of the heap data area.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Memory_corruption"
        ]
      },
      "uuid": "ce810b1e-0973-11ea-9a9f-362b9e155667",
      "value": "Heap Corruption"
    },
	{
      "description": "A path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with dot-dot-slash sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. It should be noted that access to files is limited by system operational access control (such as in the case of locked or in-use files on the Microsoft Windows operating system). This attack is also known as dot-dot-slash, directory traversal, directory climbing and backtracking. Unauthenticated traversal does not require the attacker to first authenticate to the target system.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Path_Traversal"
        ]
      },
      "uuid": "ce810f10-0973-11ea-9a9f-362b9e155667",
      "value": "Unauthenticated Directory Traversal"
    },
	{
      "description": "User Enumeration vulnerabilities exsist when the attacker is able to pass invalid arguments to the system that result in an information disclosure of username(s).",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Testing_for_User_Enumeration_and_Guessable_User_Account_(OWASP-AT-002)"
        ]
      },
      "uuid": "ce81108c-0973-11ea-9a9f-362b9e155667",
      "value": "Username Enumeration"
    },
	{
      "description": "A vulnerability that exists within the configuration of the system that allows for unauthorized access to file folders.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "ce8111c2-0973-11ea-9a9f-362b9e155667",
      "value": "Insecure Folder Permissions"
    },
	{
      "description": "Arbitrary File Download is used to describe an attacker ability to execute arbitrary commands or code on a target machine or in a target process to gain the ability to download files from the system.",
      "meta": {
        "refs": [
          "https://resources.infosecinstitute.com/arbitrary-file-download-breaking-into-the-system/#gref"
        ]
      },
      "uuid": "45b3b01a-0c8f-11ea-8d71-362b9e155667",
      "value": "Arbitrary File Download"
    },
	{
      "description": "Unlike arbitrary code execution, a code execution vulnerability allows for the exploitation in system run permissions and allows for any code to be executed on the host.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Arbitrary_code_execution"
        ]
      },
      "uuid": "7d911188-0d5e-11ea-8d71-362b9e155667",
      "value": "Code Execution"
    },
	{
      "description": "Arithmetic underflow can occur when the true result of a floating point operation is smaller in magnitude (that is, closer to zero) than the smallest value representable as a normal floating point number in the target datatype. These types of vulnerabilities can cause situations like a Denial of Service.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Arithmetic_underflow"
        ]
      },
      "uuid": "7d9113ea-0d5e-11ea-8d71-362b9e155667",
      "value": "Refcount Underflow"
    },
	{
      "description": "Server-Side Request Forgery (SSRF) is a web application vulnerability that redirects the attacker’s requests to the internal network or localhost behind the firewall. SSRF poses a particular threat to cloud services due to the use of the metadata API that allows applications to access the underlying cloud infrastructure’s information such as configurations, logs, and credentials. Although the metadata API can only be accessed locally, the SSRF vulnerability makes it accessible from the internet. This type of vulnerability also bypasses the container sandbox protection. SSRF opens the door for internal network reconnaissance, lateral movement, and even remote code execution.",
      "meta": {
        "refs": [
          "https://unit42.paloaltonetworks.com/server-side-request-forgery-exposes-data-of-technology-industrial-and-media-organizations/"
        ]
      },
      "uuid": "6e7e16ea-114c-11ea-9a9f-362b9e155667",
      "value": "Server Side Request Forgery (SSRF)"
    },
	{
      "description": "The term CRLF refers to Carriage Return Line Feed. They're used to note the termination of a line, however, dealt with differently in today’s popular Operating Systems. For example, in Windows both a CR and LF are required to note the end of a line, whereas in Linux UNIX a LF is only required. In the HTTP protocol, the CR-LF sequence is always used to terminate a line. A CRLF Injection attack occurs when a user manages to submit a CRLF into an application. This is most commonly done by modifying an HTTP parameter or URL.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/CRLF_Injection"
        ]
      },
      "uuid": "7ba90730-153e-11ea-8d71-362b9e155667",
      "value": "CRLF Injection"
    },
	{
      "description": "An XML External Entity attack is a type of attack against an application that parses XML input. This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. This attack may lead to the disclosure of confidential data, denial of service, server side request forgery, port scanning from the perspective of the machine where the parser is located, and other system impacts.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing"
        ]
      },
      "uuid": "7921dd2a-16c4-11ea-8d71-362b9e155667",
      "value": "XML External Entity MotW Bypass"
    },
	{
      "description": "A form of Unrestricted File Upload vulnerability that allows for the overwriting of existing files.",
      "meta": {
        "refs": [
          "https://www.owasp.org/index.php/Unrestricted_File_Upload"
        ]
      },
      "uuid": "e91d5534-1852-11ea-8d71-362b9e155667",
      "value": "Arbitrary File Overwrite"
    },
	{
      "description": "A branded vulnerability that does not require root access to function. The vulnerability makes it possible for a malicious app to ask for permissions while pretending to be the legitimate app. An attacker can ask for access to any permission, including SMS, photos, microphone, and GPS, allowing them to read messages, view photos, eavesdrop, and track the victim’s movements.",
      "meta": {
        "refs": [
          "https://promon.co/security-news/strandhogg/"
        ]
      },
      "uuid": "e91d5836-1852-11ea-8d71-362b9e155667",
      "value": "StrandHogg"
    },
	{
      "description": "A branded vulnerability. This vulnerability allows for the manipulation of the OAuth process within the Microsoft Azure service.",
      "meta": {
        "refs": [
          "https://www.cyberark.com/threat-research-blog/blackdirect-microsoft-azure-account-takeover/"
        ]
      },
      "uuid": "e91d59bc-1852-11ea-8d71-362b9e155667",
      "value": "BlackDirect"
    },
	{
      "description": "Targets vulnerable systems or applications in order to escalate privileges to the system; or, application.",
      "meta": {
        "refs": [
          "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"
        ]
      },
      "uuid": "839af9d8-b532-11e9-a2a3-2a2ae2dbcce4",
      "value": "Privilege Escalation"
    }
	  ],
	"version": 23
}

